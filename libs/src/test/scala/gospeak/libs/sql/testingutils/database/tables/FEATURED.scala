package gospeak.libs.sql.testingutils.database.tables

import java.time.Instant

import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._
import gospeak.libs.sql.testingutils.Entities._

/**
 * Hello
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class FEATURED private(getAlias: Option[String] = None) extends Table.SqlTable("PUBLIC", "featured", getAlias) {
  type Self = FEATURED

  val POST_ID: SqlFieldRef[Post.Id, FEATURED, POSTS] = new SqlFieldRef[Post.Id, FEATURED, POSTS](this, "post_id", POSTS.table.ID) // INT NOT NULL
  val BY: SqlFieldRef[User.Id, FEATURED, USERS] = new SqlFieldRef[User.Id, FEATURED, USERS](this, "by", USERS.table.ID) // INT NOT NULL
  val START: SqlField[Instant, FEATURED] = new SqlField[Instant, FEATURED](this, "start") // TIMESTAMP NOT NULL
  val STOP: SqlField[Instant, FEATURED] = new SqlField[Instant, FEATURED](this, "stop") // TIMESTAMP NOT NULL

  override def getFields: List[SqlField[_, FEATURED]] = List(POST_ID, BY, START, STOP)

  override def getSorts: List[Sort] = List()

  override def searchOn: List[SqlField[_, FEATURED]] = List(POST_ID, BY, START, STOP)

  def alias(alias: String): FEATURED = new FEATURED(Some(alias))

  def POST_IDJoin: Table.JoinTable = join(POSTS.table).on(_.POST_ID is _.ID)

  def BYJoin: Table.JoinTable = join(USERS.table).on(_.BY is _.ID)
}

private[database] object FEATURED {
  val table = new FEATURED() // table instance, should be accessed through `gospeak.libs.sql.testingutils.database.Tables` object
}
