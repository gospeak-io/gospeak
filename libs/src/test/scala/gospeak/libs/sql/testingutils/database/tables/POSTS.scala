package gospeak.libs.sql.testingutils.database.tables

import java.time.Instant

import gospeak.libs.sql.dsl._

/**
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class POSTS private() extends Table.SqlTable("PUBLIC", "posts", None) {
  val ID: Field[Int, POSTS] = new Field[Int, POSTS](this, "id") // INT NOT NULL
  val TITLE: Field[String, POSTS] = new Field[String, POSTS](this, "title") // VARCHAR(50) NOT NULL
  val TEXT: Field[String, POSTS] = new Field[String, POSTS](this, "text") // VARCHAR(4096) NOT NULL
  val DATE: Field[Instant, POSTS] = new Field[Instant, POSTS](this, "date") // TIMESTAMP NOT NULL
  val AUTHOR: LinkField[Int, POSTS, USERS] = new LinkField[Int, POSTS, USERS](this, "author", USERS.table.ID) // INT NOT NULL
  val CATEGORY: LinkField[Int, POSTS, CATEGORIES] = new LinkField[Int, POSTS, CATEGORIES](this, "category", CATEGORIES.table.ID) // INT

  override def getFields: List[Field[_, POSTS]] = List(ID, TITLE, TEXT, DATE, AUTHOR, CATEGORY)

  def AUTHORJoin: Table.JoinTable = join(USERS.table, AUTHOR.is(USERS.table.ID))

  def CATEGORYJoin: Table.JoinTable = join(CATEGORIES.table, CATEGORY.is(CATEGORIES.table.ID))
}

private[database] object POSTS {
  val table = new POSTS() // unique table instance, should be accessed through `gospeak.libs.sql.testingutils.database.Tables` object
}
