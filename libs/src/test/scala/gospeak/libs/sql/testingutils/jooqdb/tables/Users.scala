/*
 * This file is generated by jOOQ.
 */
package gospeak.libs.sql.testingutils.jooqdb.tables


import gospeak.libs.sql.testingutils.jooqdb.Public
import gospeak.libs.sql.testingutils.jooqdb.tables.records.UsersRecord

import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Users {

  /**
   * The reference instance of <code>PUBLIC.users</code>
   */
  val USERS = new Users
}

/**
 * This class is generated by jOOQ.
 */
class Users(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, UsersRecord],
  aliased : Table[UsersRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[UsersRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[UsersRecord] = {
    classOf[UsersRecord]
  }

  /**
   * The column <code>PUBLIC.users.id</code>.
   */
  val ID : TableField[UsersRecord, Integer] = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>PUBLIC.users.name</code>.
   */
  val NAME : TableField[UsersRecord, String] = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), "")

  /**
   * The column <code>PUBLIC.users.email</code>.
   */
  val EMAIL : TableField[UsersRecord, String] = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(50), "")

  /**
   * Create a <code>PUBLIC.users</code> table reference
   */
  def this() = {
    this(DSL.name("users"), null, null, null, null)
  }

  /**
   * Create an aliased <code>PUBLIC.users</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, gospeak.libs.sql.testingutils.jooqdb.tables.Users.USERS, null)
  }

  /**
   * Create an aliased <code>PUBLIC.users</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, gospeak.libs.sql.testingutils.jooqdb.tables.Users.USERS, null)
  }

  private def this(alias : Name, aliased : Table[UsersRecord]) = {
    this(alias, null, null, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getPrimaryKey : UniqueKey[UsersRecord] = {
Internal.createUniqueKey(Users.USERS, "CONSTRAINT_6", Array(Users.USERS.ID).asInstanceOf[Array[TableField[UsersRecord, _] ] ], true)  }

  override def getKeys : List[ UniqueKey[UsersRecord] ] = {
    return Arrays.asList[ UniqueKey[UsersRecord] ](
        Internal.createUniqueKey(Users.USERS, "CONSTRAINT_6", Array(Users.USERS.ID).asInstanceOf[Array[TableField[UsersRecord, _] ] ], true)
    )
  }

  override def as(alias : String) : Users = {
    new Users(DSL.name(alias), this)
  }

  override def as(alias : Name) : Users = {
    new Users(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Users = {
    new Users(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Users = {
    new Users(name, null)
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Integer, String, String] = {
    super.fieldsRow.asInstanceOf[ Row3[Integer, String, String] ]
  }
}
