package gospeak.libs.sql.testingutils.database.tables

import java.time.{Instant, LocalDate}

import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._
import gospeak.libs.sql.testingutils.Entities._


/**
 * Hello
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class KINDS private() extends Table.SqlTable("PUBLIC", "kinds", None) {
  val CHAR: FieldOpt[String, KINDS] = new FieldOpt[String, KINDS](this, "char") // CHAR(4)
  val VARCHAR: FieldOpt[String, KINDS] = new FieldOpt[String, KINDS](this, "varchar") // VARCHAR(50)
  val TIMESTAMP: FieldOpt[Instant, KINDS] = new FieldOpt[Instant, KINDS](this, "timestamp") // TIMESTAMP
  val DATE: FieldOpt[LocalDate, KINDS] = new FieldOpt[LocalDate, KINDS](this, "date") // DATE
  val BOOLEAN: FieldOpt[Boolean, KINDS] = new FieldOpt[Boolean, KINDS](this, "boolean") // BOOLEAN
  val INT: FieldOpt[Int, KINDS] = new FieldOpt[Int, KINDS](this, "int") // INT
  val BIGINT: FieldOpt[Long, KINDS] = new FieldOpt[Long, KINDS](this, "bigint") // BIGINT
  val DOUBLE: FieldOpt[Double, KINDS] = new FieldOpt[Double, KINDS](this, "double") // DOUBLE PRECISION
  val A_LONG_NAME: FieldOpt[Int, KINDS] = new FieldOpt[Int, KINDS](this, "a_long_name") // INT

  override def getFields: List[Field[_, KINDS]] = List(CHAR, VARCHAR, TIMESTAMP, DATE, BOOLEAN, INT, BIGINT, DOUBLE, A_LONG_NAME)

  override def getSorts: List[Sort] = List()
}

private[database] object KINDS {
  val table = new KINDS() // unique table instance, should be accessed through `gospeak.libs.sql.testingutils.database.Tables` object
}
