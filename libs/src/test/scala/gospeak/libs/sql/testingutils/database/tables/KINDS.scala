package gospeak.libs.sql.testingutils.database.tables

import java.time.{Instant, LocalDate}

import gospeak.libs.sql.dsl._

/**
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class KINDS private() extends Table.SqlTable("PUBLIC", "kinds", None) {
  val CHAR: Field[Option[String], KINDS] = new Field[Option[String], KINDS](this, "char") // CHAR(4)
  val VARCHAR: Field[Option[String], KINDS] = new Field[Option[String], KINDS](this, "varchar") // VARCHAR(50)
  val TIMESTAMP: Field[Option[Instant], KINDS] = new Field[Option[Instant], KINDS](this, "timestamp") // TIMESTAMP
  val DATE: Field[Option[LocalDate], KINDS] = new Field[Option[LocalDate], KINDS](this, "date") // DATE
  val BOOLEAN: Field[Option[Boolean], KINDS] = new Field[Option[Boolean], KINDS](this, "boolean") // BOOLEAN
  val INT: Field[Option[Int], KINDS] = new Field[Option[Int], KINDS](this, "int") // INT
  val BIGINT: Field[Option[Long], KINDS] = new Field[Option[Long], KINDS](this, "bigint") // BIGINT
  val DOUBLE: Field[Option[Double], KINDS] = new Field[Option[Double], KINDS](this, "double") // DOUBLE PRECISION
  val A_LONG_NAME: Field[Option[Int], KINDS] = new Field[Option[Int], KINDS](this, "a_long_name") // INT

  override def getFields: List[Field[_, KINDS]] = List(CHAR, VARCHAR, TIMESTAMP, DATE, BOOLEAN, INT, BIGINT, DOUBLE, A_LONG_NAME)
}

private[database] object KINDS {
  val table = new KINDS() // unique table instance, should be accessed through `gospeak.libs.sql.testingutils.database.Tables` object
}
