/*
 * This file is generated by jOOQ.
 */
package gospeak.libs.sql.testingutils.jooqdb.tables


import gospeak.libs.sql.testingutils.jooqdb.Public
import gospeak.libs.sql.testingutils.jooqdb.tables.records.PostsRecord

import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.time.LocalDateTime
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Posts {

  /**
   * The reference instance of <code>PUBLIC.posts</code>
   */
  val POSTS = new Posts
}

/**
 * This class is generated by jOOQ.
 */
class Posts(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, PostsRecord],
  aliased : Table[PostsRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[PostsRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[PostsRecord] = {
    classOf[PostsRecord]
  }

  /**
   * The column <code>PUBLIC.posts.id</code>.
   */
  val ID : TableField[PostsRecord, Integer] = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>PUBLIC.posts.title</code>.
   */
  val TITLE : TableField[PostsRecord, String] = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), "")

  /**
   * The column <code>PUBLIC.posts.text</code>.
   */
  val TEXT : TableField[PostsRecord, String] = createField(DSL.name("text"), org.jooq.impl.SQLDataType.VARCHAR(4096).nullable(false), "")

  /**
   * The column <code>PUBLIC.posts.date</code>.
   */
  val DATE : TableField[PostsRecord, LocalDateTime] = createField(DSL.name("date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), "")

  /**
   * The column <code>PUBLIC.posts.author</code>.
   */
  val AUTHOR : TableField[PostsRecord, Integer] = createField(DSL.name("author"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>PUBLIC.posts.category</code>.
   */
  val CATEGORY : TableField[PostsRecord, Integer] = createField(DSL.name("category"), org.jooq.impl.SQLDataType.INTEGER, "")

  /**
   * Create a <code>PUBLIC.posts</code> table reference
   */
  def this() = {
    this(DSL.name("posts"), null, null, null, null)
  }

  /**
   * Create an aliased <code>PUBLIC.posts</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, gospeak.libs.sql.testingutils.jooqdb.tables.Posts.POSTS, null)
  }

  /**
   * Create an aliased <code>PUBLIC.posts</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, gospeak.libs.sql.testingutils.jooqdb.tables.Posts.POSTS, null)
  }

  private def this(alias : Name, aliased : Table[PostsRecord]) = {
    this(alias, null, null, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getPrimaryKey : UniqueKey[PostsRecord] = {
Internal.createUniqueKey(Posts.POSTS, "CONSTRAINT_65", Array(Posts.POSTS.ID).asInstanceOf[Array[TableField[PostsRecord, _] ] ], true)  }

  override def getKeys : List[ UniqueKey[PostsRecord] ] = {
    return Arrays.asList[ UniqueKey[PostsRecord] ](
        Internal.createUniqueKey(Posts.POSTS, "CONSTRAINT_65", Array(Posts.POSTS.ID).asInstanceOf[Array[TableField[PostsRecord, _] ] ], true)
    )
  }

  override def as(alias : String) : Posts = {
    new Posts(DSL.name(alias), this)
  }

  override def as(alias : Name) : Posts = {
    new Posts(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Posts = {
    new Posts(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Posts = {
    new Posts(name, null)
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  override def fieldsRow : Row6[Integer, String, String, LocalDateTime, Integer, Integer] = {
    super.fieldsRow.asInstanceOf[ Row6[Integer, String, String, LocalDateTime, Integer, Integer] ]
  }
}
