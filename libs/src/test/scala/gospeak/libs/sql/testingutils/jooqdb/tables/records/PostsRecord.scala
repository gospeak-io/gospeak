/*
 * This file is generated by jOOQ.
 */
package gospeak.libs.sql.testingutils.jooqdb.tables.records


import gospeak.libs.sql.testingutils.jooqdb.tables.Posts

import java.lang.Integer
import java.lang.String
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
class PostsRecord extends UpdatableRecordImpl[PostsRecord](Posts.POSTS) with Record6[Integer, String, String, LocalDateTime, Integer, Integer] {

  /**
   * Setter for <code>PUBLIC.posts.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>PUBLIC.posts.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>PUBLIC.posts.title</code>.
   */
  def setTitle(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>PUBLIC.posts.title</code>.
   */
  def getTitle : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>PUBLIC.posts.text</code>.
   */
  def setText(value : String) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>PUBLIC.posts.text</code>.
   */
  def getText : String = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>PUBLIC.posts.date</code>.
   */
  def setDate(value : LocalDateTime) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>PUBLIC.posts.date</code>.
   */
  def getDate : LocalDateTime = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[LocalDateTime]
  }

  /**
   * Setter for <code>PUBLIC.posts.author</code>.
   */
  def setAuthor(value : Integer) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>PUBLIC.posts.author</code>.
   */
  def getAuthor : Integer = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>PUBLIC.posts.category</code>.
   */
  def setCategory(value : Integer) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>PUBLIC.posts.category</code>.
   */
  def getCategory : Integer = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record6 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row6[Integer, String, String, LocalDateTime, Integer, Integer] = {
    super.fieldsRow.asInstanceOf[ Row6[Integer, String, String, LocalDateTime, Integer, Integer] ]
  }

  override def valuesRow : Row6[Integer, String, String, LocalDateTime, Integer, Integer] = {
    super.valuesRow.asInstanceOf[ Row6[Integer, String, String, LocalDateTime, Integer, Integer] ]
  }
  override def field1 : Field[Integer] = Posts.POSTS.ID
  override def field2 : Field[String] = Posts.POSTS.TITLE
  override def field3 : Field[String] = Posts.POSTS.TEXT
  override def field4 : Field[LocalDateTime] = Posts.POSTS.DATE
  override def field5 : Field[Integer] = Posts.POSTS.AUTHOR
  override def field6 : Field[Integer] = Posts.POSTS.CATEGORY
  override def component1 : Integer = getId
  override def component2 : String = getTitle
  override def component3 : String = getText
  override def component4 : LocalDateTime = getDate
  override def component5 : Integer = getAuthor
  override def component6 : Integer = getCategory
  override def value1 : Integer = getId
  override def value2 : String = getTitle
  override def value3 : String = getText
  override def value4 : LocalDateTime = getDate
  override def value5 : Integer = getAuthor
  override def value6 : Integer = getCategory

  override def value1(value : Integer) : PostsRecord = {
    setId(value)
    this
  }

  override def value2(value : String) : PostsRecord = {
    setTitle(value)
    this
  }

  override def value3(value : String) : PostsRecord = {
    setText(value)
    this
  }

  override def value4(value : LocalDateTime) : PostsRecord = {
    setDate(value)
    this
  }

  override def value5(value : Integer) : PostsRecord = {
    setAuthor(value)
    this
  }

  override def value6(value : Integer) : PostsRecord = {
    setCategory(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : String, value4 : LocalDateTime, value5 : Integer, value6 : Integer) : PostsRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this
  }

  /**
   * Create a detached, initialised PostsRecord
   */
  def this(id : Integer, title : String, text : String, date : LocalDateTime, author : Integer, category : Integer) = {
    this()

    set(0, id)
    set(1, title)
    set(2, text)
    set(3, date)
    set(4, author)
    set(5, category)
  }
}
