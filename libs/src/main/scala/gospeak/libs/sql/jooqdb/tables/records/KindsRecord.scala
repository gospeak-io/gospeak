/*
 * This file is generated by jOOQ.
 */
package gospeak.libs.sql.jooqdb.tables.records


import gospeak.libs.sql.jooqdb.tables.Kinds

import java.lang.Boolean
import java.lang.Double
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
class KindsRecord extends TableRecordImpl[KindsRecord](Kinds.KINDS) with Record9[String, String, LocalDateTime, LocalDate, Boolean, Integer, Long, Double, Integer] {

  /**
   * Setter for <code>PUBLIC.kinds.char</code>.
   */
  def setChar(value : String) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.char</code>.
   */
  def getChar : String = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>PUBLIC.kinds.varchar</code>.
   */
  def setVarchar(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.varchar</code>.
   */
  def getVarchar : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>PUBLIC.kinds.timestamp</code>.
   */
  def setTimestamp(value : LocalDateTime) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.timestamp</code>.
   */
  def getTimestamp : LocalDateTime = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[LocalDateTime]
  }

  /**
   * Setter for <code>PUBLIC.kinds.date</code>.
   */
  def setDate(value : LocalDate) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.date</code>.
   */
  def getDate : LocalDate = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[LocalDate]
  }

  /**
   * Setter for <code>PUBLIC.kinds.boolean</code>.
   */
  def setBoolean(value : Boolean) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.boolean</code>.
   */
  def getBoolean : Boolean = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Boolean]
  }

  /**
   * Setter for <code>PUBLIC.kinds.int</code>.
   */
  def setInt(value : Integer) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.int</code>.
   */
  def getInt : Integer = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>PUBLIC.kinds.bigint</code>.
   */
  def setBigint(value : Long) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.bigint</code>.
   */
  def getBigint : Long = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[Long]
  }

  /**
   * Setter for <code>PUBLIC.kinds.double</code>.
   */
  def setDouble(value : Double) : Unit = {
    set(7, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.double</code>.
   */
  def getDouble : Double = {
    val r = get(7)
    if (r == null) null else r.asInstanceOf[Double]
  }

  /**
   * Setter for <code>PUBLIC.kinds.a_long_name</code>.
   */
  def setALongName(value : Integer) : Unit = {
    set(8, value)
  }

  /**
   * Getter for <code>PUBLIC.kinds.a_long_name</code>.
   */
  def getALongName : Integer = {
    val r = get(8)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Record9 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row9[String, String, LocalDateTime, LocalDate, Boolean, Integer, Long, Double, Integer] = {
    super.fieldsRow.asInstanceOf[ Row9[String, String, LocalDateTime, LocalDate, Boolean, Integer, Long, Double, Integer] ]
  }

  override def valuesRow : Row9[String, String, LocalDateTime, LocalDate, Boolean, Integer, Long, Double, Integer] = {
    super.valuesRow.asInstanceOf[ Row9[String, String, LocalDateTime, LocalDate, Boolean, Integer, Long, Double, Integer] ]
  }
  override def field1 : Field[String] = Kinds.KINDS.CHAR
  override def field2 : Field[String] = Kinds.KINDS.VARCHAR
  override def field3 : Field[LocalDateTime] = Kinds.KINDS.TIMESTAMP
  override def field4 : Field[LocalDate] = Kinds.KINDS.DATE
  override def field5 : Field[Boolean] = Kinds.KINDS.BOOLEAN
  override def field6 : Field[Integer] = Kinds.KINDS.INT
  override def field7 : Field[Long] = Kinds.KINDS.BIGINT
  override def field8 : Field[Double] = Kinds.KINDS.DOUBLE
  override def field9 : Field[Integer] = Kinds.KINDS.A_LONG_NAME
  override def component1 : String = getChar
  override def component2 : String = getVarchar
  override def component3 : LocalDateTime = getTimestamp
  override def component4 : LocalDate = getDate
  override def component5 : Boolean = getBoolean
  override def component6 : Integer = getInt
  override def component7 : Long = getBigint
  override def component8 : Double = getDouble
  override def component9 : Integer = getALongName
  override def value1 : String = getChar
  override def value2 : String = getVarchar
  override def value3 : LocalDateTime = getTimestamp
  override def value4 : LocalDate = getDate
  override def value5 : Boolean = getBoolean
  override def value6 : Integer = getInt
  override def value7 : Long = getBigint
  override def value8 : Double = getDouble
  override def value9 : Integer = getALongName

  override def value1(value : String) : KindsRecord = {
    setChar(value)
    this
  }

  override def value2(value : String) : KindsRecord = {
    setVarchar(value)
    this
  }

  override def value3(value : LocalDateTime) : KindsRecord = {
    setTimestamp(value)
    this
  }

  override def value4(value : LocalDate) : KindsRecord = {
    setDate(value)
    this
  }

  override def value5(value : Boolean) : KindsRecord = {
    setBoolean(value)
    this
  }

  override def value6(value : Integer) : KindsRecord = {
    setInt(value)
    this
  }

  override def value7(value : Long) : KindsRecord = {
    setBigint(value)
    this
  }

  override def value8(value : Double) : KindsRecord = {
    setDouble(value)
    this
  }

  override def value9(value : Integer) : KindsRecord = {
    setALongName(value)
    this
  }

  override def values(value1 : String, value2 : String, value3 : LocalDateTime, value4 : LocalDate, value5 : Boolean, value6 : Integer, value7 : Long, value8 : Double, value9 : Integer) : KindsRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this.value8(value8)
    this.value9(value9)
    this
  }

  /**
   * Create a detached, initialised KindsRecord
   */
  def this(char : String, varchar : String, timestamp : LocalDateTime, date : LocalDate, boolean : Boolean, int : Integer, bigint : Long, double : Double, aLongName : Integer) = {
    this()

    set(0, char)
    set(1, varchar)
    set(2, timestamp)
    set(3, date)
    set(4, boolean)
    set(5, int)
    set(6, bigint)
    set(7, double)
    set(8, aLongName)
  }
}
