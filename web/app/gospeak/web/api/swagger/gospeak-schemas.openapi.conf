# @see https://spec.openapis.org/oas/v3.0.2#data-types
# @see https://spec.openapis.org/oas/v3.0.2#schema-object

#
# Domain schemas
#

UserSlug {type: string, example: "demo", description: "It should be unique among all users"} # in Scala: User.Slug
UserFirstName {type: string, example: "Loïc"}
UserLasName {type: string, example: "Knuchel"}
UserName {type: string, example: "Loïc Knuchel"}
UserPublic { # in Scala: ApiUser.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/UserSlug"}
    firstName {"$ref": "#/components/schemas/UserFirstName"}
    lastName {"$ref": "#/components/schemas/UserLasName"}
    avatar {"$ref": "#/components/schemas/Avatar"}
    bio {"$ref": "#/components/schemas/Markdown"}
    website {"$ref": "#/components/schemas/Url"}
    social {"$ref": "#/components/schemas/Social"}
  }
  required: [slug, firstName, lastName, avatar, social]
}
UserEmbed { # in Scala: ApiUser.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/UserSlug"}
    firstName {"$ref": "#/components/schemas/UserFirstName"}
    lastName {"$ref": "#/components/schemas/UserLasName"}
    avatar {"$ref": "#/components/schemas/Avatar"}
    bio {"$ref": "#/components/schemas/Markdown"}
    website {"$ref": "#/components/schemas/Url"}
    social {"$ref": "#/components/schemas/Social"}
  }
  required: [slug, firstName, lastName, avatar, social]
}

GroupSlug {type: string, example: "ht-paris", description: "It should be unique among all groups"} # in Scala: Group.Slug
GroupName {type: string, example: "HumanTalks Paris"} # in Scala: Group.Name
GroupPublic { # in Scala: ApiGroup.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/GroupSlug"}
    name {"$ref": "#/components/schemas/GroupName"}
    contact {"$ref": "#/components/schemas/Email"}
    description {"$ref": "#/components/schemas/Markdown"}
    location {"$ref": "#/components/schemas/Place"}
    tags {"$ref": "#/components/schemas/Tags"}
    created {"$ref": "#/components/schemas/Instant"}
  }
  required: [slug, name, description, tags, created]
}
GroupEmbed { # in Scala: ApiGroup.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/GroupSlug"}
    name {"$ref": "#/components/schemas/GroupName"}
    contact {"$ref": "#/components/schemas/Email"}
    description {"$ref": "#/components/schemas/Markdown"}
    location {"$ref": "#/components/schemas/Place"}
    tags {"$ref": "#/components/schemas/Tags"}
  }
  required: [slug, name, description, tags]
}

CfpSlug {type: string, example: "ht-paris", description: "It should be unique among all CFPs"} # in Scala: Cfp.Slug
ExtCfpId {type: string, format: uuid, example: "b44f0bd0-412e-4fd6-a904-d1899439b018", description: "Id for an external CFP"} # in Scala: ExternalCfp.Id
CfpKind {type: string, enum: ["internal", "external"], description: "Internal CFPs are managed on Gospeak but not external ones. Depending on the kind of CFP, the detail link differ."}
CfpRef {oneOf: [{"$ref": "#/components/schemas/CfpSlug"}, {"$ref": "#/components/schemas/ExtCfpId"}]}
CfpName {type: string, example: "HumanTalks Paris"} # in Scala: Cfp.Name
CfpOrga { # in Scala: ApiCfp.Orga
  type: object
  properties {
    slug {"$ref": "#/components/schemas/CfpSlug"}
    name {"$ref": "#/components/schemas/CfpName"}
    begin {"$ref": "#/components/schemas/LocalDateTime"}
    close {"$ref": "#/components/schemas/LocalDateTime"}
    description {"$ref": "#/components/schemas/Markdown"}
    tags {"$ref": "#/components/schemas/Tags"}
    info {"$ref": "#/components/schemas/Info"}
  }
  required: [slug, name, description, tags, info]
}
CfpPublic { # in Scala: ApiCfp.Published
  type: object
  properties {
    kind {"$ref": "#/components/schemas/CfpKind"}
    ref {"$ref": "#/components/schemas/CfpRef"}
    name {"$ref": "#/components/schemas/CfpName"}
    logo {"$ref": "#/components/schemas/Logo"}
    url {"$ref": "#/components/schemas/Url"}
    begin {"$ref": "#/components/schemas/LocalDateTime"}
    close {"$ref": "#/components/schemas/LocalDateTime"}
    location {"$ref": "#/components/schemas/Place"}
    description {"$ref": "#/components/schemas/Markdown"}
    eventStart {"$ref": "#/components/schemas/LocalDateTime"}
    eventFinish {"$ref": "#/components/schemas/LocalDateTime"}
    eventUrl {"$ref": "#/components/schemas/Url"}
    eventTickets {"$ref": "#/components/schemas/Url"}
    eventVideos {"$ref": "#/components/schemas/Url"}
    twitterAccount {"$ref": "#/components/schemas/Url"}
    twitterHashtag {"$ref": "#/components/schemas/TwitterHashtag"}
    tags {"$ref": "#/components/schemas/Tags"}
    group {"$ref": "#/components/schemas/GroupEmbed"}
  }
  required: [kind, ref, name, description, tags]
}
CfpEmbed { # in Scala: ApiCfp.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/CfpSlug"}
    name {"$ref": "#/components/schemas/CfpName"}
    begin {"$ref": "#/components/schemas/LocalDateTime"}
    close {"$ref": "#/components/schemas/LocalDateTime"}
  }
  required: [slug, name]
}

EventSlug {type: string, example: "2019-12", description: "It should be unique among all CFPs"} # in Scala: Event.Slug
EventName {type: string, example: "HumanTalks Paris Decembre 2019"} # in Scala: Event.Name
EventOrga { # in Scala: ApiEvent.Orga
  type: object
  properties {
    slug {"$ref": "#/components/schemas/EventSlug"}
    name {"$ref": "#/components/schemas/EventName"}
    start {"$ref": "#/components/schemas/LocalDateTime"}
    published {"$ref": "#/components/schemas/Instant"}
    cfp {"$ref": "#/components/schemas/CfpEmbed"}
    venue {"$ref": "#/components/schemas/VenueEmbed"}
    proposals {type: array, items {"$ref": "#/components/schemas/ProposalEmbed"}}
    maxAttendee {type: integer, format: int32, example: 100}
    allowRsvp {type: boolean}
    descriptionTmpl {"$ref": "#/components/schemas/MustacheMarkdown"}
    orgaNotes {"$ref": "#/components/schemas/EventNotes"}
    tags {"$ref": "#/components/schemas/Tags"}
    refs {"$ref": "#/components/schemas/EventRefs"}
    info {"$ref": "#/components/schemas/Info"}
  }
  required: [slug, name, start, proposals, allowRsvp, descriptionTmpl, orgaNotes, tags, refs, info]
}
EventPublic { # in Scala: ApiEvent.Published
  type: object
  properties {
    slug {"$ref": "#/components/schemas/EventSlug"}
    name {"$ref": "#/components/schemas/EventName"}
    start {"$ref": "#/components/schemas/LocalDateTime"}
    venue {"$ref": "#/components/schemas/VenueEmbed"}
    proposals {type: array, items {"$ref": "#/components/schemas/ProposalEmbed"}}
    tags {"$ref": "#/components/schemas/Tags"}
    meetup {"$ref": "#/components/schemas/MeetupLink"}
  }
  required: [slug, name, start, proposals, tags]
}
EventEmbed { # in Scala: ApiEvent.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/EventSlug"}
    name {"$ref": "#/components/schemas/EventName"}
    start {"$ref": "#/components/schemas/LocalDateTime"}
    meetup {"$ref": "#/components/schemas/MeetupLink"}
  }
  required: [slug, name, start]
}

AttendeeResponse {type: string, enum: ["yes", "no"]}
AttendeeHost {type: boolean, description: "If the attendee is an event host"}
AttendeePublic { # in Scala: ApiAttendee.Published
  type: object
  properties {
    name {"$ref": "#/components/schemas/UserName"}
    avatar {"$ref": "#/components/schemas/Avatar"}
    meetupProfile {"$ref": "#/components/schemas/Url"}
    host {"$ref": "#/components/schemas/AttendeeHost"}
    response {"$ref": "#/components/schemas/AttendeeResponse"}
    updated {"$ref": "#/components/schemas/Instant"}
  }
}

ProposalId {type: string, format: uuid, example: "b44f0bd0-412e-4fd6-a904-d1899439b018"} # in Scala: Proposal.Id
ProposalStatus {type: string, enum: ["Pending", "Accepted", "Declined"]} # in Scala: Proposal.Status
ProposalTitle {type: string, example: "Event sourcing par l'exemple"} # in Scala: Proposal.Title
ProposalGrade {type: integer, format: int32, enum: [1, -1], description: "Grade given by an orga to a proposal"} # in Scala: Proposal.Rating.Grade
ProposalOrga { # in Scala: ApiProposal.Orga
  type: object
  properties {
    id {"$ref": "#/components/schemas/ProposalId"}
    status {"$ref": "#/components/schemas/ProposalStatus"}
    title {"$ref": "#/components/schemas/ProposalTitle"}
    description {"$ref": "#/components/schemas/Markdown"}
    duration {"$ref": "#/components/schemas/FiniteDuration"}
    slides {"$ref": "#/components/schemas/Slides"}
    video {"$ref": "#/components/schemas/Video"}
    speakers {type: array, items {"$ref": "#/components/schemas/UserEmbed"}}
    tags {"$ref": "#/components/schemas/Tags"}
    orgaTags {"$ref": "#/components/schemas/Tags"}
    cfp {"$ref": "#/components/schemas/CfpEmbed"}
    event {"$ref": "#/components/schemas/EventEmbed"}
    venue {"$ref": "#/components/schemas/VenueEmbed"}
    score {type: integer, format: int64, description: "The score of the proposal: count(likes) - count(dislikes)"}
    likes {type: integer, format: int64, description: "Count of likes on the talk"}
    dislikes {type: integer, format: int64, description: "Count of dislikes on the talk"}
    userGrade {"$ref": "#/components/schemas/ProposalGrade"}
    info {"$ref": "#/components/schemas/Info"}
  }
  required: [id, status, title, description, duration, speakers, tags, orgaTags, cfp, score, likes, dislikes, info]
}
ProposalPublic { # in Scala: ApiProposal.Published
  type: object
  properties {
    id {"$ref": "#/components/schemas/ProposalId"}
    title {"$ref": "#/components/schemas/ProposalTitle"}
    description {"$ref": "#/components/schemas/Markdown"}
    duration {"$ref": "#/components/schemas/FiniteDuration"}
    slides {"$ref": "#/components/schemas/Slides"}
    video {"$ref": "#/components/schemas/Video"}
    speakers {type: array, items {"$ref": "#/components/schemas/UserEmbed"}}
    tags {"$ref": "#/components/schemas/Tags"}
    group {"$ref": "#/components/schemas/GroupEmbed"}
    cfp {"$ref": "#/components/schemas/CfpEmbed"}
    event {"$ref": "#/components/schemas/EventEmbed"}
    venue {"$ref": "#/components/schemas/VenueEmbed"}
  }
  required: [id, title, description, duration, speakers, tags, group, cfp]
}
ProposalEmbed { # in Scala: ApiProposal.Embed
  type: object
  properties {
    id {"$ref": "#/components/schemas/ProposalId"}
    title {"$ref": "#/components/schemas/ProposalTitle"}
    description {"$ref": "#/components/schemas/Markdown"}
    duration {"$ref": "#/components/schemas/FiniteDuration"}
    slides {"$ref": "#/components/schemas/Slides"}
    video {"$ref": "#/components/schemas/Video"}
    speakers {type: array, items {"$ref": "#/components/schemas/UserEmbed"}}
    tags {"$ref": "#/components/schemas/Tags"}
  }
  required: [id, title, description, duration, speakers, tags]
}
ProposalRating { # in Scala: ApiProposal.Orga.Rating
  type: object
  properties {
    proposal {"$ref": "#/components/schemas/ProposalEmbed"}
    user {"$ref": "#/components/schemas/UserEmbed"}
    grade {"$ref": "#/components/schemas/ProposalGrade"}
    updatedAt {"$ref": "#/components/schemas/Instant"}
  }
  required: [proposal, user, grade, updatedAt]
}

PartnerSlug {type: string, example: "gospeak", description: "It should be unique for a group"} # in Scala: Partner.Slug
PartnerName {type: string, example: "Gospeak"} # in Scala: Partner.Name
PartnerEmbed { # in Scala: ApiPartner.Embed
  type: object
  properties {
    slug {"$ref": "#/components/schemas/PartnerSlug"}
    name {"$ref": "#/components/schemas/PartnerName"}
    logo {"$ref": "#/components/schemas/Logo"}
    description {"$ref": "#/components/schemas/Markdown"}
    social {"$ref": "#/components/schemas/Social"}
  }
  required: [slug, name, logo, social]
}

VenueEmbed { # in Scala: ApiVenue.Embed
  type: object
  properties {
    address {"$ref": "#/components/schemas/Place"}
    partner {"$ref": "#/components/schemas/PartnerEmbed"}
  }
  required: [address, partner]
}

CommentId {type: string, format: uuid, example: "b44f0bd0-412e-4fd6-a904-d1899439b018"} # in Scala: Comment.Id
Comment { # in Scala: ApiComment
  type: object
  properties {
    id {"$ref": "#/components/schemas/CommentId"}
    answers {"$ref": "#/components/schemas/CommentId"}
    text {type: string}
    createdAt {"$ref": "#/components/schemas/Instant"}
    createdBy {"$ref": "#/components/schemas/UserEmbed"}
  }
  required: [id, text, createdAt, createdBy]
}


#
# Utils schemas
#

EventNotes { # in Scala: ApiEvent.Notes
  type: object
  properties {
    text {type: string, example: "Private notes for orgas..."}
    updatedAt {"$ref": "#/components/schemas/Instant"}
    updatedBy {"$ref": "#/components/schemas/UserEmbed"}
  }
  required: [text, updatedAt, updatedBy]
}
EventRefs { # in Scala: ApiEvent.Refs
  type: object
  properties {
    meetup {"$ref": "#/components/schemas/EventRefMeetup"}
  }
}
EventRefMeetup { # in Scala: ApiEvent.Refs.Meetup
  type: object
  properties {
    link {"$ref": "#/components/schemas/MeetupLink"}
    group {type: string, example: "HumanTalks-Paris"}
    id {type: integer, format: int64, example: 266227725}
  }
  required: [link, group, id]
}
MeetupLink {type: string, example: "https://www.meetup.com/HumanTalks-Paris/events/266227725", description: "Link to Meetup event"} # in Scala: Event.ExtRefs
Place { # in Scala: ApiPlace
  type: object
  properties {
    name {type: string, example: "Gospeak"}
    address {type: string, example: "156 Boulevard Haussmann, 75008 Paris"}
    locality {type: string, example: "Paris"}
    country {type: string, example: "France"}
    url {type: string, format: url, example: "https://maps.google.com/?cid=3360768160548514744"}
    geo {"$ref": "#/components/schemas/Geo"}
  }
  required: [name, address, country, url, geo]
}
Geo { # in Scala: ApiGeo
  type: object
  properties {
    lat {type: number, format: double, example: 48.8716827}
    lon {type: number, format: double, example: 2.307039}
  }
  required: [lat, lon]
}
Social { # in Scala: ApiSocial
  type: object
  properties {
    facebook {"$ref": "#/components/schemas/SocialAccount"}
    instagram {"$ref": "#/components/schemas/SocialAccount"}
    twitter {"$ref": "#/components/schemas/SocialAccount"}
    linkedIn {"$ref": "#/components/schemas/SocialAccount"}
    youtube {"$ref": "#/components/schemas/SocialAccount"}
    meetup {"$ref": "#/components/schemas/SocialAccount"}
    eventbrite {"$ref": "#/components/schemas/SocialAccount"}
    slack {"$ref": "#/components/schemas/SocialAccount"}
    discord {"$ref": "#/components/schemas/SocialAccount"}
    github {"$ref": "#/components/schemas/SocialAccount"}
  }
}
SocialAccount { # in Scala: ApiSocial.Account
  type: object
  properties {
    url {type: string, format: url, example: "https://twitter.com/GospeakApp", description: "Url of the social account"}
    handle {type: string, example: "@GospeakApp", description: "Short text identifying the account"}
  }
}
Info { # in Scala: ApiInfo
  type: object
  properties {
    createdAt {"$ref": "#/components/schemas/Instant"}
    createdBy {"$ref": "#/components/schemas/UserEmbed"}
    updatedAt {"$ref": "#/components/schemas/Instant"}
    updatedBy {"$ref": "#/components/schemas/UserEmbed"}
  }
  required: [createdAt, createdBy, updatedAt, updatedBy]
}
Tags {type: array, items {type: string}, example: ["Tech", "Scala", "Public speaking"]}
Markdown {type: string, format: markdown, example: "A **markdown** text..."} # in Scala: Markdown
MustacheMarkdown {type: string, format: markdown, example: "A {{mustache}} template formated in **markdown** :D"} # in Scala: MustacheMarkdownTmpl
Email {type: string, format: email, example: "paris@humantalks.com"} # in Scala: EmailAddress
Url {type: string, format: url, example: "https://gospeak.io/speakers/loicknuchel"} # in Scala: Url
Logo {type: string, format: url, example: "https://res.cloudinary.com/gospeak/image/upload/gospeak/logo-text.svg"} # in Scala: Logo
Avatar {type: string, format: url, example: "https://secure.gravatar.com/avatar/f755e6e8914df5cbaa74d30dd7de1ae2"} # in Scala: Avatar
Slides {type: string, format: url, example: "https://www.slideshare.net/loicknuchel/scala-bad-practices-scalaio-2019"} # in Scala: Slides
Video {type: string, format: url, example: "https://www.youtube.com/watch?v=l0c4oR4JPr4"} # in Scala: Video
TwitterHashtag {type: string, example: "speaking"} # in Scala: TwitterHashtag
Instant {type: string, format: date-time, description: "A date time with timezone"} # in Scala: Instant
LocalDateTime {type: string, format: local-date-time, example: "2019-12-10T19:00:00", description: "A local date time, without timezone"} # in Scala: LocalDateTime
FiniteDuration {type: integer, format: int32, example: 10, description: "Duration in minutes"} # in Scala: FiniteDuration
PageNo {type: integer, format: int32, minimum: 1, example: 1, default: 1, description: "Page number (starting at 1)"} # in Scala: Page.No
PageSize {type: integer, format: int32, minimum: 0, example: 20, default: 20, description: "Number of items in pages (default: 20)"} # in Scala: Page.Size
PageSort {type: string} # in Scala: Page.OrderBy
PageSearch {type: string} # in Scala: Page.Search

ResponseExecTime {type: integer, format: int64, minimum: 0, example: 6, description: "Server side time in millis to execute the request"}
