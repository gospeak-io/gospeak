GET         /                                                                              gospeak.web.pages.published.HomeCtrl.index
GET         /why                                                                           gospeak.web.pages.published.HomeCtrl.why

GET         /cfps                                                                          gospeak.web.pages.published.cfps.CfpCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /cfps/getting-started                                                          gospeak.web.pages.published.cfps.CfpCtrl.gettingStarted()
GET         /cfps/add                                                                      gospeak.web.pages.published.cfps.CfpCtrl.add()
POST        /cfps/add                                                                      gospeak.web.pages.published.cfps.CfpCtrl.doAdd()
GET         /cfps/ext/:cfp                                                                 gospeak.web.pages.published.cfps.CfpCtrl.detailExt(cfp: ExternalCfp.Id)
GET         /cfps/ext/:cfp/edit                                                            gospeak.web.pages.published.cfps.CfpCtrl.edit(cfp: ExternalCfp.Id)
POST        /cfps/ext/:cfp/edit                                                            gospeak.web.pages.published.cfps.CfpCtrl.doEdit(cfp: ExternalCfp.Id)
GET         /cfps/:cfp                                                                     gospeak.web.pages.published.cfps.CfpCtrl.detail(cfp: Cfp.Slug)
GET         /cfps/:cfp/propose                                                             gospeak.web.pages.published.cfps.CfpCtrl.propose(cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
POST        /cfps/:cfp/propose                                                             gospeak.web.pages.published.cfps.CfpCtrl.doPropose(cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
POST        /cfps/:cfp/propose/signup                                                      gospeak.web.pages.published.cfps.CfpCtrl.doProposeSignup(cfp: Cfp.Slug)
POST        /cfps/:cfp/propose/login                                                       gospeak.web.pages.published.cfps.CfpCtrl.doProposeLogin(cfp: Cfp.Slug)

GET         /groups                                                                        gospeak.web.pages.published.groups.GroupCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /groups/:group                                                                 gospeak.web.pages.published.groups.GroupCtrl.detail(group: Group.Slug)
GET         /groups/:group/join                                                            gospeak.web.pages.published.groups.GroupCtrl.doJoin(group: Group.Slug)
GET         /groups/:group/leave                                                           gospeak.web.pages.published.groups.GroupCtrl.doLeave(group: Group.Slug)
GET         /groups/:group/events                                                          gospeak.web.pages.published.groups.GroupCtrl.events(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /groups/:group/events/:event                                                   gospeak.web.pages.published.groups.GroupCtrl.event(group: Group.Slug, event: Event.Slug)
GET         /groups/:group/events/:event/attendees/meetup                                  gospeak.web.pages.published.groups.GroupCtrl.eventAttendeesMeetup(group: Group.Slug, event: Event.Slug)
POST        /groups/:group/events/:event/comment                                           gospeak.web.pages.published.groups.GroupCtrl.doSendComment(group: Group.Slug, event: Event.Slug)
GET         /groups/:group/events/:event/rsvp/:answer                                      gospeak.web.pages.published.groups.GroupCtrl.doRsvp(group: Group.Slug, event: Event.Slug, answer: Event.Rsvp.Answer)
GET         /groups/:group/talks                                                           gospeak.web.pages.published.groups.GroupCtrl.talks(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /groups/:group/talks/:proposal                                                 gospeak.web.pages.published.groups.GroupCtrl.talk(group: Group.Slug, proposal: Proposal.Id)
GET         /groups/:group/speakers                                                        gospeak.web.pages.published.groups.GroupCtrl.speakers(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /groups/:group/members                                                         gospeak.web.pages.published.groups.GroupCtrl.members(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)

GET         /speakers                                                                      gospeak.web.pages.published.speakers.SpeakerCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /speakers/:speaker                                                             gospeak.web.pages.published.speakers.SpeakerCtrl.detail(speaker: User.Slug, params: Page.Params ?= Page.Params.defaults)

GET         /signup                                                                        gospeak.web.auth.AuthCtrl.signup(redirect: Option[String] ?= None)
POST        /signup                                                                        gospeak.web.auth.AuthCtrl.doSignup(redirect: Option[String] ?= None)
GET         /login                                                                         gospeak.web.auth.AuthCtrl.login(redirect: Option[String] ?= None)
POST        /login                                                                         gospeak.web.auth.AuthCtrl.doLogin(redirect: Option[String] ?= None)
GET         /authenticate/:provider                                                        gospeak.web.auth.AuthCtrl.authenticate(provider: String)
GET         /logout                                                                        gospeak.web.auth.AuthCtrl.doLogout
POST        /resend-email-validation                                                       gospeak.web.auth.AuthCtrl.resendEmailValidation
GET         /resend-email-validation/:email                                                gospeak.web.auth.AuthCtrl.resendEmailValidationExt(email: EmailAddress)
GET         /validate-account                                                              gospeak.web.auth.AuthCtrl.doValidateAccount(id: UserRequest.Id)
GET         /forgot-password                                                               gospeak.web.auth.AuthCtrl.forgotPassword(redirect: Option[String] ?= None)
POST        /forgot-password                                                               gospeak.web.auth.AuthCtrl.doForgotPassword(redirect: Option[String] ?= None)
GET         /reset-password                                                                gospeak.web.auth.AuthCtrl.resetPassword(id: UserRequest.Id)
POST        /reset-password                                                                gospeak.web.auth.AuthCtrl.doResetPassword(id: UserRequest.Id)

GET         /u                                                                             gospeak.web.pages.user.UserCtrl.index
GET         /u/answer/:request                                                             gospeak.web.pages.user.UserCtrl.answerRequest(request: UserRequest.Id)
POST        /u/accept/:request                                                             gospeak.web.pages.user.UserCtrl.acceptRequest(request: UserRequest.Id)
POST        /u/reject/:request                                                             gospeak.web.pages.user.UserCtrl.rejectRequest(request: UserRequest.Id)
GET         /u/talks                                                                       gospeak.web.pages.user.talks.TalkCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /u/talks/create                                                                gospeak.web.pages.user.talks.TalkCtrl.create
POST        /u/talks/create                                                                gospeak.web.pages.user.talks.TalkCtrl.doCreate
GET         /u/talks/:talk                                                                 gospeak.web.pages.user.talks.TalkCtrl.detail(talk: Talk.Slug)
GET         /u/talks/:talk/edit                                                            gospeak.web.pages.user.talks.TalkCtrl.edit(talk: Talk.Slug)
POST        /u/talks/:talk/edit                                                            gospeak.web.pages.user.talks.TalkCtrl.doEdit(talk: Talk.Slug)
POST        /u/talks/:talk/speakers                                                        gospeak.web.pages.user.talks.TalkCtrl.inviteSpeaker(talk: Talk.Slug)
POST        /u/talks/:talk/speakers/cancel/:request                                        gospeak.web.pages.user.talks.TalkCtrl.cancelInviteSpeaker(talk: Talk.Slug, request: UserRequest.Id)
POST        /u/talks/:talk/speakers/:speaker                                               gospeak.web.pages.user.talks.TalkCtrl.removeSpeaker(talk: Talk.Slug, speaker: User.Slug)
POST        /u/talks/:talk/slides                                                          gospeak.web.pages.user.talks.TalkCtrl.doAddSlides(talk: Talk.Slug)
POST        /u/talks/:talk/video                                                           gospeak.web.pages.user.talks.TalkCtrl.doAddVideo(talk: Talk.Slug)
POST        /u/talks/:talk/status/:status                                                  gospeak.web.pages.user.talks.TalkCtrl.changeStatus(talk: Talk.Slug, status: Talk.Status)
GET         /u/talks/:talk/events                                                          gospeak.web.pages.user.talks.TalkCtrl.findExternalEvent(talk: Talk.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/talks/:talk/events/create                                                   gospeak.web.pages.user.talks.TalkCtrl.createExternalEvent(talk: Talk.Slug)
POST        /u/talks/:talk/events/create                                                   gospeak.web.pages.user.talks.TalkCtrl.doCreateExternalEvent(talk: Talk.Slug)
GET         /u/talks/:talk/events/:event                                                   gospeak.web.pages.user.talks.TalkCtrl.createExternalProposal(talk: Talk.Slug, event: ExternalEvent.Id)
POST        /u/talks/:talk/events/:event                                                   gospeak.web.pages.user.talks.TalkCtrl.doCreateExternalProposal(talk: Talk.Slug, event: ExternalEvent.Id)
GET         /u/talks/:talk/cfps                                                            gospeak.web.pages.user.talks.cfps.CfpCtrl.list(talk: Talk.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/talks/:talk/cfps/:cfp                                                       gospeak.web.pages.user.talks.proposals.ProposalCtrl.create(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/cfps/:cfp                                                       gospeak.web.pages.user.talks.proposals.ProposalCtrl.doCreate(talk: Talk.Slug, cfp: Cfp.Slug)
GET         /u/talks/:talk/proposals                                                       gospeak.web.pages.user.talks.proposals.ProposalCtrl.list(talk: Talk.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/talks/:talk/proposals/:cfp                                                  gospeak.web.pages.user.talks.proposals.ProposalCtrl.detail(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/comment                                          gospeak.web.pages.user.talks.proposals.ProposalCtrl.doSendComment(talk: Talk.Slug, cfp: Cfp.Slug)
GET         /u/talks/:talk/proposals/:cfp/edit                                             gospeak.web.pages.user.talks.proposals.ProposalCtrl.edit(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/edit                                             gospeak.web.pages.user.talks.proposals.ProposalCtrl.doEdit(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/speakers                                         gospeak.web.pages.user.talks.proposals.ProposalCtrl.inviteSpeaker(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/speakers/cancel/:request                         gospeak.web.pages.user.talks.proposals.ProposalCtrl.cancelInviteSpeaker(talk: Talk.Slug, cfp: Cfp.Slug, request: UserRequest.Id)
POST        /u/talks/:talk/proposals/:cfp/speakers/:speaker                                gospeak.web.pages.user.talks.proposals.ProposalCtrl.removeSpeaker(talk: Talk.Slug, cfp: Cfp.Slug, speaker: User.Slug)
POST        /u/talks/:talk/proposals/:cfp/slides                                           gospeak.web.pages.user.talks.proposals.ProposalCtrl.doAddSlides(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/video                                            gospeak.web.pages.user.talks.proposals.ProposalCtrl.doAddVideo(talk: Talk.Slug, cfp: Cfp.Slug)
GET         /u/proposals                                                                   gospeak.web.pages.user.proposals.ProposalCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /u/profile                                                                     gospeak.web.pages.user.profile.ProfileCtrl.detail(params: Page.Params ?= Page.Params.defaults)
GET         /u/profile/edit                                                                gospeak.web.pages.user.profile.ProfileCtrl.edit
POST        /u/profile/edit                                                                gospeak.web.pages.user.profile.ProfileCtrl.doEdit
POST        /u/profile/status/:status                                                      gospeak.web.pages.user.profile.ProfileCtrl.doEditStatus(status: User.Status)

GET         /u/groups/create                                                               gospeak.web.pages.orga.GroupCtrl.create
POST        /u/groups/create                                                               gospeak.web.pages.orga.GroupCtrl.doCreate
GET         /u/groups/join                                                                 gospeak.web.pages.orga.GroupCtrl.join(params: Page.Params ?= Page.Params.defaults)
POST        /u/groups/join/:group                                                          gospeak.web.pages.orga.GroupCtrl.doJoin(group: Group.Slug, params: Page.Params)
GET         /u/groups/:group                                                               gospeak.web.pages.orga.GroupCtrl.detail(group: Group.Slug)
GET         /u/groups/:group/edit                                                          gospeak.web.pages.orga.GroupCtrl.edit(group: Group.Slug)
POST        /u/groups/:group/edit                                                          gospeak.web.pages.orga.GroupCtrl.doEdit(group: Group.Slug)
GET         /u/groups/:group/accept-join/:request                                          gospeak.web.pages.orga.GroupCtrl.acceptJoin(group: Group.Slug, request: UserRequest.Id)
GET         /u/groups/:group/reject-join/:request                                          gospeak.web.pages.orga.GroupCtrl.rejectJoin(group: Group.Slug, request: UserRequest.Id)
GET         /u/groups/:group/contact-members                                               gospeak.web.pages.orga.GroupCtrl.contactMembers(group: Group.Slug)
POST        /u/groups/:group/contact-members                                               gospeak.web.pages.orga.GroupCtrl.doContactMembers(group: Group.Slug)
GET         /u/groups/:group/events                                                        gospeak.web.pages.orga.events.EventCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/events/create                                                 gospeak.web.pages.orga.events.EventCtrl.create(group: Group.Slug)
POST        /u/groups/:group/events/create                                                 gospeak.web.pages.orga.events.EventCtrl.doCreate(group: Group.Slug)
GET         /u/groups/:group/events/:event                                                 gospeak.web.pages.orga.events.EventCtrl.detail(group: Group.Slug, event: Event.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/events/:event/edit                                            gospeak.web.pages.orga.events.EventCtrl.edit(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/edit                                            gospeak.web.pages.orga.events.EventCtrl.doEdit(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/notes                                           gospeak.web.pages.orga.events.EventCtrl.doEditNotes(group: Group.Slug, event: Event.Slug)
GET         /u/groups/:group/events/:event/set-venue                                       gospeak.web.pages.orga.events.EventCtrl.setVenue(group: Group.Slug, event: Event.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/events/:event/set-venue/create                                gospeak.web.pages.orga.events.EventCtrl.createVenue(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/set-venue/create                                gospeak.web.pages.orga.events.EventCtrl.doCreateVenue(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/set-venue/:venue                                gospeak.web.pages.orga.events.EventCtrl.doSetVenue(group: Group.Slug, event: Event.Slug, venue: Venue.Id, public: Boolean)
POST        /u/groups/:group/events/:event/attach-cfp                                      gospeak.web.pages.orga.events.EventCtrl.attachCfp(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/add-talk/:talk                                  gospeak.web.pages.orga.events.EventCtrl.addToTalks(group: Group.Slug, event: Event.Slug, talk: Proposal.Id, params: Page.Params ?= Page.Params.defaults)
POST        /u/groups/:group/events/:event/cancel-talk/:talk                               gospeak.web.pages.orga.events.EventCtrl.cancelTalk(group: Group.Slug, event: Event.Slug, talk: Proposal.Id, params: Page.Params ?= Page.Params.defaults)
POST        /u/groups/:group/events/:event/move-talk/:talk                                 gospeak.web.pages.orga.events.EventCtrl.moveTalk(group: Group.Slug, event: Event.Slug, talk: Proposal.Id, up: Boolean ?= true, params: Page.Params ?= Page.Params.defaults)
POST        /u/groups/:group/events/:event/reject-proposal/:talk                           gospeak.web.pages.orga.events.EventCtrl.rejectProposal(group: Group.Slug, event: Event.Slug, talk: Proposal.Id, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/events/:event/publish                                         gospeak.web.pages.orga.events.EventCtrl.publish(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/publish                                         gospeak.web.pages.orga.events.EventCtrl.doPublish(group: Group.Slug, event: Event.Slug)
GET         /u/groups/:group/events/:event/contact-rsvps                                   gospeak.web.pages.orga.events.EventCtrl.contactRsvps(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/contact-rsvps                                   gospeak.web.pages.orga.events.EventCtrl.doContactRsvps(group: Group.Slug, event: Event.Slug)
GET         /u/groups/:group/events/:event/template/:templateId                            gospeak.web.pages.orga.events.EventCtrl.showTemplate(group: Group.Slug, event: Event.Slug, templateId: String)
GET         /u/groups/:group/cfps                                                          gospeak.web.pages.orga.cfps.CfpCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/cfps/create                                                   gospeak.web.pages.orga.cfps.CfpCtrl.create(group: Group.Slug, event: Option[Event.Slug] ?= None)
POST        /u/groups/:group/cfps/create                                                   gospeak.web.pages.orga.cfps.CfpCtrl.doCreate(group: Group.Slug, event: Option[Event.Slug] ?= None)
GET         /u/groups/:group/cfps/:cfp                                                     gospeak.web.pages.orga.cfps.CfpCtrl.detail(group: Group.Slug, cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/cfps/:cfp/edit                                                gospeak.web.pages.orga.cfps.CfpCtrl.edit(group: Group.Slug, cfp: Cfp.Slug)
POST        /u/groups/:group/cfps/:cfp/edit                                                gospeak.web.pages.orga.cfps.CfpCtrl.doEdit(group: Group.Slug, cfp: Cfp.Slug)
GET         /u/groups/:group/cfps/:cfp/proposals                                           gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.list(group: Group.Slug, cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/cfps/:cfp/proposals/:proposal                                 gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.detail(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/rate/:grade                     gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.doRate(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id, grade: Proposal.Rating.Grade)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/comment                         gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.doSendComment(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id, orga: Boolean)
GET         /u/groups/:group/cfps/:cfp/proposals/:proposal/edit                            gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.edit(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/edit                            gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.doEdit(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/speakers                        gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.inviteSpeaker(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/speakers/cancel/:request        gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.cancelInviteSpeaker(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id, request: UserRequest.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/speakers/:speaker               gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.removeSpeaker(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id, speaker: User.Slug)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/slides                          gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.doAddSlides(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/video                           gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.doAddVideo(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/reject                          gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.reject(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/cancel-reject                   gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.cancelRejection(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
GET         /u/groups/:group/proposals                                                     gospeak.web.pages.orga.proposals.ProposalCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/speakers                                                      gospeak.web.pages.orga.speakers.SpeakerCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/speakers/:speaker                                             gospeak.web.pages.orga.speakers.SpeakerCtrl.detail(group: Group.Slug, speaker: User.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/partners                                                      gospeak.web.pages.orga.partners.PartnerCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/partners/create                                               gospeak.web.pages.orga.partners.PartnerCtrl.create(group: Group.Slug)
POST        /u/groups/:group/partners/create                                               gospeak.web.pages.orga.partners.PartnerCtrl.doCreate(group: Group.Slug)
GET         /u/groups/:group/partners/:partner                                             gospeak.web.pages.orga.partners.PartnerCtrl.detail(group: Group.Slug, partner: Partner.Slug)
GET         /u/groups/:group/partners/:partner/edit                                        gospeak.web.pages.orga.partners.PartnerCtrl.edit(group: Group.Slug, partner: Partner.Slug)
POST        /u/groups/:group/partners/:partner/edit                                        gospeak.web.pages.orga.partners.PartnerCtrl.doEdit(group: Group.Slug, partner: Partner.Slug)
POST        /u/groups/:group/partners/:partner/remove                                      gospeak.web.pages.orga.partners.PartnerCtrl.doRemove(group: Group.Slug, partner: Partner.Slug)
GET         /u/groups/:group/partners/:partner/venues/create                               gospeak.web.pages.orga.partners.PartnerCtrl.createVenue(group: Group.Slug, partner: Partner.Slug)
POST        /u/groups/:group/partners/:partner/venues/create                               gospeak.web.pages.orga.partners.PartnerCtrl.doCreateVenue(group: Group.Slug, partner: Partner.Slug)
GET         /u/groups/:group/partners/:partner/venues/:venue/edit                          gospeak.web.pages.orga.partners.PartnerCtrl.editVenue(group: Group.Slug, partner: Partner.Slug, venue: Venue.Id)
POST        /u/groups/:group/partners/:partner/venues/:venue/edit                          gospeak.web.pages.orga.partners.PartnerCtrl.doEditVenue(group: Group.Slug, partner: Partner.Slug, venue: Venue.Id)
POST        /u/groups/:group/partners/:partner/venues/:venue/remove                        gospeak.web.pages.orga.partners.PartnerCtrl.doRemoveVenue(group: Group.Slug, partner: Partner.Slug, venue: Venue.Id)
GET         /u/groups/:group/partners/:partner/contacts/create                             gospeak.web.pages.orga.partners.PartnerCtrl.createContact(group: Group.Slug, partner: Partner.Slug)
POST        /u/groups/:group/partners/:partner/contacts/create                             gospeak.web.pages.orga.partners.PartnerCtrl.doCreateContact(group: Group.Slug, partner: Partner.Slug)
GET         /u/groups/:group/partners/:partner/contacts/:contact/edit                      gospeak.web.pages.orga.partners.PartnerCtrl.editContact(group: Group.Slug, partner: Partner.Slug, contact: Contact.Id)
POST        /u/groups/:group/partners/:partner/contacts/:contact/edit                      gospeak.web.pages.orga.partners.PartnerCtrl.doEditContact(group: Group.Slug, partner: Partner.Slug, contact: Contact.Id)
POST        /u/groups/:group/partners/:partner/contacts/:contact/remove                    gospeak.web.pages.orga.partners.PartnerCtrl.doRemoveContact(group: Group.Slug, partner: Partner.Slug, contact: Contact.Id)
GET         /u/groups/:group/sponsors                                                      gospeak.web.pages.orga.sponsors.SponsorCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/sponsors/create-pack                                          gospeak.web.pages.orga.sponsors.SponsorCtrl.createPack(group: Group.Slug)
POST        /u/groups/:group/sponsors/create-pack                                          gospeak.web.pages.orga.sponsors.SponsorCtrl.doCreatePack(group: Group.Slug)
GET         /u/groups/:group/sponsors/:pack                                                gospeak.web.pages.orga.sponsors.SponsorCtrl.detail(group: Group.Slug, pack: SponsorPack.Slug)
POST        /u/groups/:group/sponsors/:pack/disable                                        gospeak.web.pages.orga.sponsors.SponsorCtrl.disablePack(group: Group.Slug, pack: SponsorPack.Slug)
POST        /u/groups/:group/sponsors/:pack/enable                                         gospeak.web.pages.orga.sponsors.SponsorCtrl.enablePack(group: Group.Slug, pack: SponsorPack.Slug)
GET         /u/groups/:group/sponsors/:pack/create                                         gospeak.web.pages.orga.sponsors.SponsorCtrl.create(group: Group.Slug, pack: SponsorPack.Slug, partner: Option[Partner.Slug] ?= None)
POST        /u/groups/:group/sponsors/:pack/create                                         gospeak.web.pages.orga.sponsors.SponsorCtrl.doCreate(group: Group.Slug, pack: SponsorPack.Slug, partner: Option[Partner.Slug] ?= None)
POST        /u/groups/:group/sponsors/:sponsor/paid                                        gospeak.web.pages.orga.sponsors.SponsorCtrl.paid(group: Group.Slug, sponsor: Sponsor.Id)
GET         /u/groups/:group/sponsors/:sponsor/edit                                        gospeak.web.pages.orga.sponsors.SponsorCtrl.edit(group: Group.Slug, sponsor: Sponsor.Id, partner: Option[Partner.Slug] ?= None)
POST        /u/groups/:group/sponsors/:sponsor/edit                                        gospeak.web.pages.orga.sponsors.SponsorCtrl.doEdit(group: Group.Slug, sponsor: Sponsor.Id, partner: Option[Partner.Slug] ?= None)
POST        /u/groups/:group/sponsors/:sponsor/remove                                      gospeak.web.pages.orga.sponsors.SponsorCtrl.remove(group: Group.Slug, sponsor: Sponsor.Id)
GET         /u/groups/:group/settings                                                      gospeak.web.pages.orga.settings.SettingsCtrl.settings(group: Group.Slug)
GET         /u/groups/:group/settings/actions/create                                       gospeak.web.pages.orga.settings.SettingsCtrl.createAction(group: Group.Slug)
POST        /u/groups/:group/settings/actions/create                                       gospeak.web.pages.orga.settings.SettingsCtrl.doCreateAction(group: Group.Slug)
GET         /u/groups/:group/settings/actions/:trigger/:index/edit                         gospeak.web.pages.orga.settings.SettingsCtrl.updateAction(group: Group.Slug, trigger: Group.Settings.Action.Trigger, index: Int)
POST        /u/groups/:group/settings/actions/:trigger/:index/edit                         gospeak.web.pages.orga.settings.SettingsCtrl.doUpdateAction(group: Group.Slug, trigger: Group.Settings.Action.Trigger, index: Int)
POST        /u/groups/:group/settings/actions/:trigger/:index/remove                       gospeak.web.pages.orga.settings.SettingsCtrl.doRemoveAction(group: Group.Slug, trigger: Group.Settings.Action.Trigger, index: Int)
POST        /u/groups/:group/settings/meetup/authorize                                     gospeak.web.pages.orga.settings.SettingsCtrl.meetupAuthorize(group: Group.Slug)
GET         /u/groups/:group/settings/meetup/callback/:meetupGroup                         gospeak.web.pages.orga.settings.SettingsCtrl.meetupCallback(group: Group.Slug, meetupGroup: MeetupGroup.Slug)
POST        /u/groups/:group/settings/slack-account                                        gospeak.web.pages.orga.settings.SettingsCtrl.updateSlackAccount(group: Group.Slug)
POST        /u/groups/:group/settings/remove-account/:kind                                 gospeak.web.pages.orga.settings.SettingsCtrl.removeAccount(group: Group.Slug, kind: String)
GET         /u/groups/:group/settings/event-template                                       gospeak.web.pages.orga.settings.SettingsCtrl.updateEventTemplate(group: Group.Slug, templateId: Option[String] = None)
POST        /u/groups/:group/settings/event-template                                       gospeak.web.pages.orga.settings.SettingsCtrl.doUpdateEventTemplate(group: Group.Slug, templateId: Option[String] = None)
GET         /u/groups/:group/settings/event-template/:templateId                           gospeak.web.pages.orga.settings.SettingsCtrl.updateEventTemplate(group: Group.Slug, templateId: Option[String])
POST        /u/groups/:group/settings/event-template/:templateId                           gospeak.web.pages.orga.settings.SettingsCtrl.doUpdateEventTemplate(group: Group.Slug, templateId: Option[String])
POST        /u/groups/:group/settings/event-template/:templateId/remove                    gospeak.web.pages.orga.settings.SettingsCtrl.doRemoveEventTemplate(group: Group.Slug, templateId: String)
POST        /u/groups/:group/settings/orgas                                                gospeak.web.pages.orga.settings.SettingsCtrl.inviteOrga(group: Group.Slug)
POST        /u/groups/:group/settings/orgas/cancel/:request                                gospeak.web.pages.orga.settings.SettingsCtrl.cancelInviteOrga(group: Group.Slug, request: UserRequest.Id)
POST        /u/groups/:group/settings/orgas/:user/remove                                   gospeak.web.pages.orga.settings.SettingsCtrl.doRemoveOrga(group: Group.Slug, user: User.Slug)

GET         /styleguide                                                                    gospeak.web.pages.styleguide.StyleguideCtrl.index(params: Page.Params ?= Page.Params.defaults)
GET         /styleguide/published/:id                                                      gospeak.web.pages.styleguide.StyleguideCtrl.published(id: String)
GET         /styleguide/speaker/:id                                                        gospeak.web.pages.styleguide.StyleguideCtrl.speaker(id: String)
GET         /styleguide/orga/:id                                                           gospeak.web.pages.styleguide.StyleguideCtrl.orga(id: String)
GET         /styleguide/answers/:id                                                        gospeak.web.pages.styleguide.StyleguideCtrl.answers(id: String)
GET         /styleguide/emails/:id                                                         gospeak.web.pages.styleguide.StyleguideCtrl.emails(id: String)
GET         /status                                                                        gospeak.web.api.StatusCtrl.getStatus

GET         /ui/integrations/cloudinary/signature                                          gospeak.web.api.ui.UtilsCtrl.cloudinarySignature
GET         /ui/validate/slack-token                                                       gospeak.web.api.ui.UtilsCtrl.validateSlackToken(token: String)
GET         /ui/cfps/duplicates                                                            gospeak.web.api.ui.UtilsCtrl.duplicatesExtCfp(params: ExternalCfp.DuplicateParams ?= ExternalCfp.DuplicateParams.defaults)
GET         /ui/utils/embed                                                                gospeak.web.api.ui.UtilsCtrl.embed(url: Url)
+ nocsrf
POST        /ui/utils/markdown-to-html                                                     gospeak.web.api.ui.UtilsCtrl.markdownToHtml
GET         /ui/utils/template-data/:ref                                                   gospeak.web.api.ui.UtilsCtrl.templateData(ref: utils.TemplateData.Ref)
+ nocsrf
POST        /ui/utils/render-template                                                      gospeak.web.api.ui.UtilsCtrl.renderTemplate
GET         /ui/suggest/tags                                                               gospeak.web.api.ui.SuggestCtrl.suggestTags
GET         /ui/suggest/:group/tags                                                        gospeak.web.api.ui.SuggestCtrl.suggestOrgaTags(group: Group.Slug)
GET         /ui/suggest/:group/cfps                                                        gospeak.web.api.ui.SuggestCtrl.suggestCfps(group: Group.Slug)
GET         /ui/suggest/:group/partners                                                    gospeak.web.api.ui.SuggestCtrl.suggestPartners(group: Group.Slug)
GET         /ui/suggest/:group/partners/:partner/contacts                                  gospeak.web.api.ui.SuggestCtrl.suggestContacts(group: Group.Slug, partner: Partner.Id)
GET         /ui/suggest/:group/venues                                                      gospeak.web.api.ui.SuggestCtrl.suggestVenues(group: Group.Slug)
GET         /ui/suggest/:group/sponsor-packs                                               gospeak.web.api.ui.SuggestCtrl.suggestSponsorPacks(group: Group.Slug)
GET         /ui/search/:group                                                              gospeak.web.api.ui.SuggestCtrl.searchRoot(group: Group.Slug)
GET         /ui/search/:group/speakers                                                     gospeak.web.api.ui.SuggestCtrl.searchSpeakers(group: Group.Slug, q: String)
GET         /ui/search/:group/proposals                                                    gospeak.web.api.ui.SuggestCtrl.searchProposals(group: Group.Slug, q: String)
GET         /ui/search/:group/partners                                                     gospeak.web.api.ui.SuggestCtrl.searchPartners(group: Group.Slug, q: String)
GET         /ui/search/:group/events                                                       gospeak.web.api.ui.SuggestCtrl.searchEvents(group: Group.Slug, q: String)

GET         /api                                                                           gospeak.web.api.swagger.SwaggerCtrl.getUi
GET         /api/openapi.json                                                              gospeak.web.api.swagger.SwaggerCtrl.getSpec
GET         /api/groups                                                                    gospeak.web.api.published.GroupCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /api/groups/:group                                                             gospeak.web.api.published.GroupCtrl.detail(group: Group.Slug)
GET         /api/groups/:group/events                                                      gospeak.web.api.published.GroupCtrl.events(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /api/groups/:group/events/:event                                               gospeak.web.api.published.GroupCtrl.event(group: Group.Slug, event: Event.Slug)
GET         /api/groups/:group/events/:event/attendees/meetup                              gospeak.web.api.published.GroupCtrl.eventAttendeesMeetup(group: Group.Slug, event: Event.Slug)
GET         /api/groups/:group/talks                                                       gospeak.web.api.published.GroupCtrl.talks(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /api/groups/:group/talks/:talk                                                 gospeak.web.api.published.GroupCtrl.talk(group: Group.Slug, talk: Proposal.Id)
GET         /api/groups/:group/speakers                                                    gospeak.web.api.published.GroupCtrl.speakers(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /api/cfps                                                                      gospeak.web.api.published.CfpCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /api/cfps/:cfp                                                                 gospeak.web.api.published.CfpCtrl.detail(cfp: Cfp.Slug)
GET         /api/cfps/ext/:cfp                                                             gospeak.web.api.published.CfpCtrl.detailExt(cfp: ExternalCfp.Id)
GET         /api/speakers                                                                  gospeak.web.api.published.SpeakerCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /api/speakers/:speaker                                                         gospeak.web.api.published.SpeakerCtrl.detail(speaker: User.Slug)

GET         /api/u/groups/:group/events                                                    gospeak.web.api.orga.ApiEventCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /api/u/groups/:group/events/:event                                             gospeak.web.api.orga.ApiEventCtrl.detail(group: Group.Slug, event: Event.Slug)
GET         /api/u/groups/:group/cfps                                                      gospeak.web.api.orga.ApiCfpCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /api/u/groups/:group/cfps/:cfp                                                 gospeak.web.api.orga.ApiCfpCtrl.detail(group: Group.Slug, cfp: Cfp.Slug)
GET         /api/u/groups/:group/cfps/:cfp/proposals                                       gospeak.web.api.orga.ApiProposalCtrl.list(group: Group.Slug, cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /api/u/groups/:group/cfps/:cfp/proposals/:proposal                             gospeak.web.api.orga.ApiProposalCtrl.detail(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
GET         /api/u/groups/:group/cfps/:cfp/proposals/:proposal/ratings                     gospeak.web.api.orga.ApiProposalCtrl.ratings(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
GET         /api/u/groups/:group/cfps/:cfp/proposals/:proposal/comments/speaker            gospeak.web.api.orga.ApiProposalCtrl.speakerComments(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
GET         /api/u/groups/:group/cfps/:cfp/proposals/:proposal/comments/orga               gospeak.web.api.orga.ApiProposalCtrl.orgaComments(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
#GET         /api/u/groups/:group/cfps/:cfp/proposals/:proposal/invites                     gospeak.web.api.orga.ApiProposalCtrl.invites(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
GET         /api/u/groups/:group/proposals                                                 gospeak.web.api.orga.ApiProposalCtrl.listAll(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)

GET         /assets/*file                                                                  controllers.Assets.versioned(path="/public/lib", file: Asset)
GET         /:file                                                                         controllers.Assets.at(path="/public/lib/web/root", file: String)
