GET         /                                                                              fr.gospeak.web.pages.published.HomeCtrl.index
GET         /why                                                                           fr.gospeak.web.pages.published.HomeCtrl.why

GET         /cfps                                                                          fr.gospeak.web.pages.published.cfps.CfpCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /cfps/getting-started                                                          fr.gospeak.web.pages.published.cfps.CfpCtrl.gettingStarted()
GET         /cfps/:cfp                                                                     fr.gospeak.web.pages.published.cfps.CfpCtrl.detail(cfp: Cfp.Slug)
GET         /cfps/:cfp/propose                                                             fr.gospeak.web.pages.published.cfps.CfpCtrl.propose(cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
POST        /cfps/:cfp/propose                                                             fr.gospeak.web.pages.published.cfps.CfpCtrl.doPropose(cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
POST        /cfps/:cfp/propose/signup                                                      fr.gospeak.web.pages.published.cfps.CfpCtrl.doProposeSignup(cfp: Cfp.Slug)
POST        /cfps/:cfp/propose/login                                                       fr.gospeak.web.pages.published.cfps.CfpCtrl.doProposeLogin(cfp: Cfp.Slug)

GET         /groups                                                                        fr.gospeak.web.pages.published.groups.GroupCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /groups/:group                                                                 fr.gospeak.web.pages.published.groups.GroupCtrl.detail(group: Group.Slug)
GET         /groups/:group/join                                                            fr.gospeak.web.pages.published.groups.GroupCtrl.doJoin(group: Group.Slug)
GET         /groups/:group/leave                                                           fr.gospeak.web.pages.published.groups.GroupCtrl.doLeave(group: Group.Slug)
GET         /groups/:group/events                                                          fr.gospeak.web.pages.published.groups.GroupCtrl.events(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /groups/:group/events/:event                                                   fr.gospeak.web.pages.published.groups.GroupCtrl.event(group: Group.Slug, event: Event.Slug)
GET         /groups/:group/talks                                                           fr.gospeak.web.pages.published.groups.GroupCtrl.talks(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /groups/:group/talks/:proposal                                                 fr.gospeak.web.pages.published.groups.GroupCtrl.talk(group: Group.Slug, proposal: Proposal.Id)
GET         /groups/:group/speakers                                                        fr.gospeak.web.pages.published.groups.GroupCtrl.speakers(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)

GET         /speakers                                                                      fr.gospeak.web.pages.published.speakers.SpeakerCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /speakers/:speaker                                                             fr.gospeak.web.pages.published.speakers.SpeakerCtrl.detail(speaker: User.Slug, params: Page.Params ?= Page.Params.defaults)

GET         /signup                                                                        fr.gospeak.web.auth.AuthCtrl.signup(redirect: Option[String] ?= None)
POST        /signup                                                                        fr.gospeak.web.auth.AuthCtrl.doSignup(redirect: Option[String] ?= None)
GET         /login                                                                         fr.gospeak.web.auth.AuthCtrl.login(redirect: Option[String] ?= None)
POST        /login                                                                         fr.gospeak.web.auth.AuthCtrl.doLogin(redirect: Option[String] ?= None)
GET         /logout                                                                        fr.gospeak.web.auth.AuthCtrl.doLogout
POST        /account-validation                                                            fr.gospeak.web.auth.AuthCtrl.accountValidation
GET         /validate-account                                                              fr.gospeak.web.auth.AuthCtrl.doValidateAccount(id: UserRequest.Id)
GET         /forgot-password                                                               fr.gospeak.web.auth.AuthCtrl.forgotPassword(redirect: Option[String] ?= None)
POST        /forgot-password                                                               fr.gospeak.web.auth.AuthCtrl.doForgotPassword(redirect: Option[String] ?= None)
GET         /reset-password                                                                fr.gospeak.web.auth.AuthCtrl.resetPassword(id: UserRequest.Id)
POST        /reset-password                                                                fr.gospeak.web.auth.AuthCtrl.doResetPassword(id: UserRequest.Id)

GET         /u                                                                             fr.gospeak.web.pages.user.UserCtrl.index
GET         /u/answer/:request                                                             fr.gospeak.web.pages.user.UserCtrl.answerRequest(request: UserRequest.Id)
POST        /u/accept/:request                                                             fr.gospeak.web.pages.user.UserCtrl.acceptRequest(request: UserRequest.Id)
POST        /u/reject/:request                                                             fr.gospeak.web.pages.user.UserCtrl.rejectRequest(request: UserRequest.Id)

GET         /u/groups/create                                                               fr.gospeak.web.pages.orga.GroupCtrl.create
POST        /u/groups/create                                                               fr.gospeak.web.pages.orga.GroupCtrl.doCreate
GET         /u/groups/join                                                                 fr.gospeak.web.pages.orga.GroupCtrl.join(params: Page.Params ?= Page.Params.defaults)
POST        /u/groups/join/:group                                                          fr.gospeak.web.pages.orga.GroupCtrl.doJoin(group: Group.Slug, params: Page.Params)
GET         /u/groups/:group                                                               fr.gospeak.web.pages.orga.GroupCtrl.detail(group: Group.Slug)
GET         /u/groups/:group/edit                                                          fr.gospeak.web.pages.orga.GroupCtrl.edit(group: Group.Slug)
POST        /u/groups/:group/edit                                                          fr.gospeak.web.pages.orga.GroupCtrl.doEdit(group: Group.Slug)
GET         /u/groups/:group/accept-join/:request                                          fr.gospeak.web.pages.orga.GroupCtrl.acceptJoin(group: Group.Slug, request: UserRequest.Id)
GET         /u/groups/:group/reject-join/:request                                          fr.gospeak.web.pages.orga.GroupCtrl.rejectJoin(group: Group.Slug, request: UserRequest.Id)
GET         /u/groups/:group/events                                                        fr.gospeak.web.pages.orga.events.EventCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/events/create                                                 fr.gospeak.web.pages.orga.events.EventCtrl.create(group: Group.Slug)
POST        /u/groups/:group/events/create                                                 fr.gospeak.web.pages.orga.events.EventCtrl.doCreate(group: Group.Slug)
GET         /u/groups/:group/events/:event                                                 fr.gospeak.web.pages.orga.events.EventCtrl.detail(group: Group.Slug, event: Event.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/events/:event/edit                                            fr.gospeak.web.pages.orga.events.EventCtrl.edit(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/edit                                            fr.gospeak.web.pages.orga.events.EventCtrl.doEdit(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/attach-cfp                                      fr.gospeak.web.pages.orga.events.EventCtrl.attachCfp(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/add-talk/:talk                                  fr.gospeak.web.pages.orga.events.EventCtrl.addToTalks(group: Group.Slug, event: Event.Slug, talk: Proposal.Id, params: Page.Params ?= Page.Params.defaults)
POST        /u/groups/:group/events/:event/cancel-talk/:talk                               fr.gospeak.web.pages.orga.events.EventCtrl.cancelTalk(group: Group.Slug, event: Event.Slug, talk: Proposal.Id, params: Page.Params ?= Page.Params.defaults)
POST        /u/groups/:group/events/:event/move-talk/:talk                                 fr.gospeak.web.pages.orga.events.EventCtrl.moveTalk(group: Group.Slug, event: Event.Slug, talk: Proposal.Id, up: Boolean ?= true, params: Page.Params ?= Page.Params.defaults)
POST        /u/groups/:group/events/:event/reject-proposal/:talk                           fr.gospeak.web.pages.orga.events.EventCtrl.rejectProposal(group: Group.Slug, event: Event.Slug, talk: Proposal.Id, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/events/:event/publish                                         fr.gospeak.web.pages.orga.events.EventCtrl.publish(group: Group.Slug, event: Event.Slug)
POST        /u/groups/:group/events/:event/publish                                         fr.gospeak.web.pages.orga.events.EventCtrl.doPublish(group: Group.Slug, event: Event.Slug)
GET         /u/groups/:group/events/:event/template/:templateId                            fr.gospeak.web.pages.orga.events.EventCtrl.showTemplate(group: Group.Slug, event: Event.Slug, templateId: String)
GET         /u/groups/:group/cfps                                                          fr.gospeak.web.pages.orga.cfps.CfpCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/cfps/create                                                   fr.gospeak.web.pages.orga.cfps.CfpCtrl.create(group: Group.Slug, event: Option[Event.Slug] ?= None)
POST        /u/groups/:group/cfps/create                                                   fr.gospeak.web.pages.orga.cfps.CfpCtrl.doCreate(group: Group.Slug, event: Option[Event.Slug] ?= None)
GET         /u/groups/:group/cfps/:cfp                                                     fr.gospeak.web.pages.orga.cfps.CfpCtrl.detail(group: Group.Slug, cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/cfps/:cfp/edit                                                fr.gospeak.web.pages.orga.cfps.CfpCtrl.edit(group: Group.Slug, cfp: Cfp.Slug)
POST        /u/groups/:group/cfps/:cfp/edit                                                fr.gospeak.web.pages.orga.cfps.CfpCtrl.doEdit(group: Group.Slug, cfp: Cfp.Slug)
GET         /u/groups/:group/cfps/:cfp/proposals                                           fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.list(group: Group.Slug, cfp: Cfp.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/cfps/:cfp/proposals/:proposal                                 fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.detail(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
GET         /u/groups/:group/cfps/:cfp/proposals/:proposal/edit                            fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.edit(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/edit                            fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.doEdit(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/speakers                        fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.inviteSpeaker(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/speakers/cancel/:request        fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.cancelInviteSpeaker(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id, request: UserRequest.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/speakers/:speaker               fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.removeSpeaker(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id, speaker: User.Slug)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/slides                          fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.doAddSlides(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/video                           fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.doAddVideo(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/reject                          fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.reject(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
POST        /u/groups/:group/cfps/:cfp/proposals/:proposal/cancel-reject                   fr.gospeak.web.pages.orga.cfps.proposals.ProposalCtrl.cancelRejection(group: Group.Slug, cfp: Cfp.Slug, proposal: Proposal.Id)
GET         /u/groups/:group/proposals                                                     fr.gospeak.web.pages.orga.proposals.ProposalCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/speakers                                                      fr.gospeak.web.pages.orga.speakers.SpeakerCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/speakers/:speaker                                             fr.gospeak.web.pages.orga.speakers.SpeakerCtrl.detail(group: Group.Slug, speaker: User.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/partners                                                      fr.gospeak.web.pages.orga.partners.PartnerCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/partners/create                                               fr.gospeak.web.pages.orga.partners.PartnerCtrl.create(group: Group.Slug)
POST        /u/groups/:group/partners/create                                               fr.gospeak.web.pages.orga.partners.PartnerCtrl.doCreate(group: Group.Slug)
GET         /u/groups/:group/partners/:partner                                             fr.gospeak.web.pages.orga.partners.PartnerCtrl.detail(group: Group.Slug, partner: Partner.Slug)
GET         /u/groups/:group/partners/:partner/edit                                        fr.gospeak.web.pages.orga.partners.PartnerCtrl.edit(group: Group.Slug, partner: Partner.Slug)
POST        /u/groups/:group/partners/:partner/edit                                        fr.gospeak.web.pages.orga.partners.PartnerCtrl.doEdit(group: Group.Slug, partner: Partner.Slug)
GET         /u/groups/:group/partners/:partner/venues/create                               fr.gospeak.web.pages.orga.partners.venues.VenueCtrl.create(group: Group.Slug, partner: Partner.Slug)
POST        /u/groups/:group/partners/:partner/venues/create                               fr.gospeak.web.pages.orga.partners.venues.VenueCtrl.doCreate(group: Group.Slug, partner: Partner.Slug)
GET         /u/groups/:group/partners/:partner/venues/:venue                               fr.gospeak.web.pages.orga.partners.venues.VenueCtrl.detail(group: Group.Slug, partner: Partner.Slug, venue: Venue.Id)
GET         /u/groups/:group/partners/:partner/venues/:venue/edit                          fr.gospeak.web.pages.orga.partners.venues.VenueCtrl.edit(group: Group.Slug, partner: Partner.Slug, venue: Venue.Id)
POST        /u/groups/:group/partners/:partner/venues/:venue/edit                          fr.gospeak.web.pages.orga.partners.venues.VenueCtrl.doEdit(group: Group.Slug, partner: Partner.Slug, venue: Venue.Id)
GET         /u/groups/:group/partners/:partner/contacts                                    fr.gospeak.web.pages.orga.partners.contacts.ContactCtrl.list(group: Group.Slug, partner: Partner.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/partners/:partner/contacts/create                             fr.gospeak.web.pages.orga.partners.contacts.ContactCtrl.create(group: Group.Slug, partner: Partner.Slug)
POST        /u/groups/:group/partners/:partner/contacts/create                             fr.gospeak.web.pages.orga.partners.contacts.ContactCtrl.doCreate(group: Group.Slug, partner: Partner.Slug)
GET         /u/groups/:group/partners/:partner/contacts/:contact                           fr.gospeak.web.pages.orga.partners.contacts.ContactCtrl.detail(group: Group.Slug, partner: Partner.Slug, contact: Contact.Id)
GET         /u/groups/:group/partners/:partner/contacts/:contact/edit                      fr.gospeak.web.pages.orga.partners.contacts.ContactCtrl.edit(group: Group.Slug, partner: Partner.Slug, contact: Contact.Id)
POST        /u/groups/:group/partners/:partner/contacts/:contact/edit                      fr.gospeak.web.pages.orga.partners.contacts.ContactCtrl.doEdit(group: Group.Slug, partner: Partner.Slug, contact: Contact.Id)
GET         /u/groups/:group/venues                                                        fr.gospeak.web.pages.orga.venues.VenueCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/venues/create                                                 fr.gospeak.web.pages.orga.venues.VenueCtrl.create(group: Group.Slug)
POST        /u/groups/:group/venues/create                                                 fr.gospeak.web.pages.orga.venues.VenueCtrl.doCreate(group: Group.Slug)
GET         /u/groups/:group/venues/:venue                                                 fr.gospeak.web.pages.orga.venues.VenueCtrl.detail(group: Group.Slug, venue: Venue.Id)
GET         /u/groups/:group/venues/:venue/edit                                            fr.gospeak.web.pages.orga.venues.VenueCtrl.edit(group: Group.Slug, venue: Venue.Id)
POST        /u/groups/:group/venues/:venue/edit                                            fr.gospeak.web.pages.orga.venues.VenueCtrl.doEdit(group: Group.Slug, venue: Venue.Id)
GET         /u/groups/:group/sponsors                                                      fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.list(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/groups/:group/sponsors/create-pack                                          fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.createPack(group: Group.Slug)
POST        /u/groups/:group/sponsors/create-pack                                          fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.doCreatePack(group: Group.Slug)
GET         /u/groups/:group/sponsors/:pack                                                fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.detail(group: Group.Slug, pack: SponsorPack.Slug)
POST        /u/groups/:group/sponsors/:pack/disable                                        fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.disablePack(group: Group.Slug, pack: SponsorPack.Slug)
POST        /u/groups/:group/sponsors/:pack/enable                                         fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.enablePack(group: Group.Slug, pack: SponsorPack.Slug)
GET         /u/groups/:group/sponsors/:pack/create                                         fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.create(group: Group.Slug, pack: SponsorPack.Slug, partner: Option[Partner.Slug] ?= None)
POST        /u/groups/:group/sponsors/:pack/create                                         fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.doCreate(group: Group.Slug, pack: SponsorPack.Slug, partner: Option[Partner.Slug] ?= None)
POST        /u/groups/:group/sponsors/:sponsor/paid                                        fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.paid(group: Group.Slug, sponsor: Sponsor.Id)
POST        /u/groups/:group/sponsors/:sponsor/remove                                      fr.gospeak.web.pages.orga.sponsors.SponsorCtrl.remove(group: Group.Slug, sponsor: Sponsor.Id)
GET         /u/groups/:group/settings                                                      fr.gospeak.web.pages.orga.settings.SettingsCtrl.settings(group: Group.Slug)
POST        /u/groups/:group/settings/meetup/authorize                                     fr.gospeak.web.pages.orga.settings.SettingsCtrl.meetupAuthorize(group: Group.Slug)
GET         /u/groups/:group/settings/meetup/callback/:meetupGroup                         fr.gospeak.web.pages.orga.settings.SettingsCtrl.meetupCallback(group: Group.Slug, meetupGroup: MeetupGroup.Slug)
POST        /u/groups/:group/settings/slack-account                                        fr.gospeak.web.pages.orga.settings.SettingsCtrl.updateSlackAccount(group: Group.Slug)
POST        /u/groups/:group/settings/remove-account/:kind                                 fr.gospeak.web.pages.orga.settings.SettingsCtrl.removeAccount(group: Group.Slug, kind: String)
POST        /u/groups/:group/settings/add-action                                           fr.gospeak.web.pages.orga.settings.SettingsCtrl.addAction(group: Group.Slug)
POST        /u/groups/:group/settings/remove-action                                        fr.gospeak.web.pages.orga.settings.SettingsCtrl.removeAction(group: Group.Slug, trigger: Group.Settings.Action.Trigger, index: Int)
GET         /u/groups/:group/settings/event-template                                       fr.gospeak.web.pages.orga.settings.SettingsCtrl.updateEventTemplate(group: Group.Slug, templateId: Option[String] = None)
POST        /u/groups/:group/settings/event-template                                       fr.gospeak.web.pages.orga.settings.SettingsCtrl.doUpdateEventTemplate(group: Group.Slug, templateId: Option[String] = None)
GET         /u/groups/:group/settings/event-template/:templateId                           fr.gospeak.web.pages.orga.settings.SettingsCtrl.updateEventTemplate(group: Group.Slug, templateId: Option[String])
POST        /u/groups/:group/settings/event-template/:templateId                           fr.gospeak.web.pages.orga.settings.SettingsCtrl.doUpdateEventTemplate(group: Group.Slug, templateId: Option[String])
POST        /u/groups/:group/settings/event-template/:templateId/remove                    fr.gospeak.web.pages.orga.settings.SettingsCtrl.doRemoveEventTemplate(group: Group.Slug, templateId: String)
POST        /u/groups/:group/settings/orgas                                                fr.gospeak.web.pages.orga.settings.SettingsCtrl.inviteOrga(group: Group.Slug)
POST        /u/groups/:group/settings/orgas/cancel/:request                                fr.gospeak.web.pages.orga.settings.SettingsCtrl.cancelInviteOrga(group: Group.Slug, request: UserRequest.Id)
POST        /u/groups/:group/settings/orgas/:user/remove                                   fr.gospeak.web.pages.orga.settings.SettingsCtrl.doRemoveOrga(group: Group.Slug, user: User.Slug)

GET         /u/profile                                                                     fr.gospeak.web.pages.speaker.SpeakerCtrl.profile(params: Page.Params ?= Page.Params.defaults)
GET         /u/edit-profile                                                                fr.gospeak.web.pages.speaker.SpeakerCtrl.getProfile(params: Page.Params ?= Page.Params.defaults)
POST        /u/profile                                                                     fr.gospeak.web.pages.speaker.SpeakerCtrl.editProfile()
POST        /u/profile/status/:status                                                      fr.gospeak.web.pages.speaker.SpeakerCtrl.changeStatus(status: User.Profile.Status)
GET         /u/talks                                                                       fr.gospeak.web.pages.speaker.talks.TalkCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /u/talks/create                                                                fr.gospeak.web.pages.speaker.talks.TalkCtrl.create
POST        /u/talks/create                                                                fr.gospeak.web.pages.speaker.talks.TalkCtrl.doCreate
GET         /u/talks/:talk                                                                 fr.gospeak.web.pages.speaker.talks.TalkCtrl.detail(talk: Talk.Slug)
GET         /u/talks/:talk/edit                                                            fr.gospeak.web.pages.speaker.talks.TalkCtrl.edit(talk: Talk.Slug)
POST        /u/talks/:talk/edit                                                            fr.gospeak.web.pages.speaker.talks.TalkCtrl.doEdit(talk: Talk.Slug)
POST        /u/talks/:talk/speakers                                                        fr.gospeak.web.pages.speaker.talks.TalkCtrl.inviteSpeaker(talk: Talk.Slug)
POST        /u/talks/:talk/speakers/cancel/:request                                        fr.gospeak.web.pages.speaker.talks.TalkCtrl.cancelInviteSpeaker(talk: Talk.Slug, request: UserRequest.Id)
POST        /u/talks/:talk/speakers/:speaker                                               fr.gospeak.web.pages.speaker.talks.TalkCtrl.removeSpeaker(talk: Talk.Slug, speaker: User.Slug)
POST        /u/talks/:talk/slides                                                          fr.gospeak.web.pages.speaker.talks.TalkCtrl.doAddSlides(talk: Talk.Slug)
POST        /u/talks/:talk/video                                                           fr.gospeak.web.pages.speaker.talks.TalkCtrl.doAddVideo(talk: Talk.Slug)
POST        /u/talks/:talk/status/:status                                                  fr.gospeak.web.pages.speaker.talks.TalkCtrl.changeStatus(talk: Talk.Slug, status: Talk.Status)
GET         /u/talks/:talk/cfps                                                            fr.gospeak.web.pages.speaker.talks.cfps.CfpCtrl.list(talk: Talk.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/talks/:talk/cfps/:cfp                                                       fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.create(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/cfps/:cfp                                                       fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.doCreate(talk: Talk.Slug, cfp: Cfp.Slug)
GET         /u/talks/:talk/proposals                                                       fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.list(talk: Talk.Slug, params: Page.Params ?= Page.Params.defaults)
GET         /u/talks/:talk/proposals/:cfp                                                  fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.detail(talk: Talk.Slug, cfp: Cfp.Slug)
GET         /u/talks/:talk/proposals/:cfp/edit                                             fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.edit(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/edit                                             fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.doEdit(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/speakers                                         fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.inviteSpeaker(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/speakers/cancel/:request                         fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.cancelInviteSpeaker(talk: Talk.Slug, cfp: Cfp.Slug, request: UserRequest.Id)
POST        /u/talks/:talk/proposals/:cfp/speakers/:speaker                                fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.removeSpeaker(talk: Talk.Slug, cfp: Cfp.Slug, speaker: User.Slug)
POST        /u/talks/:talk/proposals/:cfp/slides                                           fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.doAddSlides(talk: Talk.Slug, cfp: Cfp.Slug)
POST        /u/talks/:talk/proposals/:cfp/video                                            fr.gospeak.web.pages.speaker.talks.proposals.ProposalCtrl.doAddVideo(talk: Talk.Slug, cfp: Cfp.Slug)
GET         /u/proposals                                                                   fr.gospeak.web.pages.speaker.proposals.ProposalCtrl.list(params: Page.Params ?= Page.Params.defaults)

GET         /styleguide                                                                    fr.gospeak.web.pages.published.HomeCtrl.styleguide(params: Page.Params ?= Page.Params.defaults)
GET         /status                                                                        fr.gospeak.web.api.StatusCtrl.getStatus

+ nocsrf
POST        /ui/utils/markdown-to-html                                                     fr.gospeak.web.api.ui.UtilsCtrl.markdownToHtml
GET         /ui/utils/embed                                                                fr.gospeak.web.api.ui.UtilsCtrl.embed(url: Url)
GET         /ui/suggest/tags                                                               fr.gospeak.web.api.ui.SuggestCtrl.suggestTags
GET         /ui/suggest/:group/cfps                                                        fr.gospeak.web.api.ui.SuggestCtrl.suggestCfps(group: Group.Slug)
GET         /ui/suggest/:group/partners                                                    fr.gospeak.web.api.ui.SuggestCtrl.suggestPartners(group: Group.Slug)
GET         /ui/suggest/:group/partners/:partner/contacts                                  fr.gospeak.web.api.ui.SuggestCtrl.suggestContacts(group: Group.Slug, partner: Partner.Id)
GET         /ui/suggest/:group/venues                                                      fr.gospeak.web.api.ui.SuggestCtrl.suggestVenues(group: Group.Slug)
GET         /ui/suggest/:group/sponsor-packs                                               fr.gospeak.web.api.ui.SuggestCtrl.suggestSponsorPacks(group: Group.Slug)
GET         /ui/search/:group                                                              fr.gospeak.web.api.ui.SuggestCtrl.searchRoot(group: Group.Slug)
GET         /ui/search/:group/speakers                                                     fr.gospeak.web.api.ui.SuggestCtrl.searchSpeakers(group: Group.Slug, q: String)
GET         /ui/search/:group/proposals                                                    fr.gospeak.web.api.ui.SuggestCtrl.searchProposals(group: Group.Slug, q: String)
GET         /ui/search/:group/partners                                                     fr.gospeak.web.api.ui.SuggestCtrl.searchPartners(group: Group.Slug, q: String)
GET         /ui/search/:group/events                                                       fr.gospeak.web.api.ui.SuggestCtrl.searchEvents(group: Group.Slug, q: String)
GET         /ui/validate/slack-token                                                       fr.gospeak.web.api.ui.SuggestCtrl.validateSlackToken(token: String)
GET         /ui/utils/template-data/:ref                                                   fr.gospeak.web.api.ui.SuggestCtrl.templateData(ref: utils.TemplateData.Ref)
+ nocsrf
POST        /ui/utils/render-template                                                      fr.gospeak.web.api.ui.SuggestCtrl.renderTemplate

GET         /api/groups                                                                    fr.gospeak.web.api.published.GroupCtrl.list(params: Page.Params ?= Page.Params.defaults)
GET         /api/groups/:group                                                             fr.gospeak.web.api.published.GroupCtrl.detail(group: Group.Slug)
GET         /api/groups/:group/talks                                                       fr.gospeak.web.api.published.GroupCtrl.talks(group: Group.Slug, params: Page.Params ?= Page.Params.defaults)

GET         /assets/*file                                                                  controllers.Assets.versioned(path="/public", file: Asset)
