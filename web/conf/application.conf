include "play.conf"
include "silhouette.conf"

# Configuration file for the Gospeak app
# It is read into `gospeak.web.AppConf` class using pureconfig, see serializers there if needed.

# For local development, environment variables are read from the `.env` file. Sensitive ones are "changeme", you can change them in place but DO NOT commit them. You can also create a `local/application.local.conf` file to put them (see include at the bottom).
# When deployed, you have to setup environment variables in your provider. In Heroku it's in Settings > Config Vars in your app.

app {
  # App environment, used to specify specific behaviors
  # Possible values: (cf gospeak.core.ApplicationConf.Env & gospeak.web.AppConf:81)
  # - `local`  : do not send write operation on external services and drop/create the database
  # - `dev`    : do not send write operation on external services and drop/create the database
  # - `staging`: do not send write operation on external services and run migrations on the database
  # - `prod`   : enable all external services and run migrations on the database
  env = ${APP_ENV}

  # Base url for the app, used for oauth redirects mainly.
  # Examples: http://localhost:9000 or https://gospeak.io
  base-url = ${APP_URL}

  # Admin emails, allow users with these emails to access admin pages. You should have at least one.
  admins = ${APP_ADMINS}

  # An AES key used to crypt data in db.
  # You can be generated using `gospeak.libs.scala.Crypto.aesGenerateKey()` or the "should generate an aes key" test in `CryptoSpec`
  aes-key = ${APP_SECRET}
}

# Database url, it should include all the connexion infos.
# It is read and parsed using `gospeak.core.services.storage.DbConf.from` and only support PostgreSQL and in-memory H2 (for local development)
# Using heroku, the Postgres addon is automatically added and the `DATABASE_URL` variable is set, you have nothing to do :D
database = ${DATABASE_URL}

# Upload service for pictures.
upload {
  # Possible values: (cf gospeak.core.services.upload.UploadConf)
  # - `url`       : just show an url field an save the image url, no real upload
  # - `cloudinary`: use the cloudinary widget to upload the picture and store the cloudinary url.
  type = ${UPLOAD_TYPE}

  # Required only for `cloudinary` type
  # To setup cloudinary, create an account at https://cloudinary.com
  cloud-name = ${?CLOUDINARY_CLOUD_NAME}       # see "Account Details" in Dashboard
  creds.key = ${?CLOUDINARY_API_KEY}           # "API Key" in "Account Details" in Dashboard
  creds.secret = ${?CLOUDINARY_API_SECRET}     # "API Secret" in "Account Details" in Dashboard
  upload-preset = ${?CLOUDINARY_UPLOAD_PRESET} # Optional, preset to use to upload pictures
}

# Email service configuration, it is required to send emails to users.
# The only real supported service is SendGrid, the two ohers are mock ones for test and development purpose.
email {
  # Possible values: (cf gospeak.core.services.email.EmailConf)
  # - `console`  : print emails to the console instead of sending them, usefull for development
  # - `in-memory`:  keep emails in memory instead of sending them, usefull for tests to check what were sent
  # - `send-grid`: send emails using SendGrid, you should have an account and fill your api key
  type = ${EMAIL_TYPE}

  # Required only for `send-grid` type
  # To set up SendGrid, add the heroku add on or create an account to https://sendgrid.com.
  # Then create an API key (Settings > API Keys), you only need "Mail send" permission in "Restricted Access"
  api-key = ${?EMAIL_API_KEY}
}

# To allow Gospeak to send twitts
twitter {
  # Possible values: (cf gospeak.core.services.twitter.TwitterConf)
  # - `console`: print tweets to the console instead of sending them, usefull for development
  # - `twitter`: use a real twitter client
  type = ${TWITTER_TYPE}

  # Required only for `twitter` type
  # Create an app from: https://developer.twitter.com/en/apps
  consumer-key = ${?TWITTER_CONSUMER_KEY}
  consumer-secret = ${?TWITTER_CONSUMER_SECRET}
  access-key = ${?TWITTER_ACCESS_KEY}
  access-secret = ${?TWITTER_ACCESS_SECRET}
}

# To connect to the Meetup API (import group, publish events...)
meetup {
  # Possible values: (cf gospeak.core.services.meetup.MeetupConf)
  # - `disabled`: do not use meetup client
  # - `enabled` : use a real meetup client
  type = ${MEETUP_TYPE}

  # Required only for `enabled` type
  # Create your keys using: https://secure.meetup.com/meetup_api/oauth_consumers
  key = ${?MEETUP_KEY}
  secret = ${?MEETUP_SECRET}
}

# To use Google Maps API in order to identify places
# Create your keys using: https://console.cloud.google.com/google/maps-apis/credentials (enable Places API before if needed)
# The backend key should be limited using your server IP, it's used to find google places from meetup addresses
# The frontend key should be limited using your domain name, it's used as place autocomplete in forms
google-maps {
  backend-api-key = ${GOOGLE_MAPS_BACKEND_API_KEY}
  frontend-api-key = ${GOOGLE_MAPS_FRONTEND_API_KEY}
}

# Optional, used to access YouTube API and fetch videos from conference playlists and channels
youtube {
  # Possible values: (cf gospeak.core.services.video.YoutubeConf)
  # - `disabled`: do not use youtube client
  # - `enabled` : use a real youtube client
  type = ${YOUTUBE_TYPE}

  # Required only for `enabled` type
  # Create your account following: https://developers.google.com/youtube/v3/getting-started, the YouTube secret is a JSON conf
  secret = ${?YOUTUBE_SECRET}
}

gospeak {
  event {
    description = """
{% if event.venue %}
This month we are hosted by **{{event.venue.name}}**, thanks to them :)

![{{event.venue.name}} logo]({{event.venue.logo}})
{% endif %}

{% if event.proposals.size > 0 %}
Here are the talks for this session:
{% endif %}

{% for proposal in event.proposals %}
- **{{proposal.title}}** by {% for speaker in proposal.speakers %}{% if forloop.index == 1 %}{% elsif forloop.last == true %} and {% else %}, {% endif %}*{{speaker.name}}*{% endfor %}

{{proposal.description | strip_html | truncatewords: 50}} {% if proposal.publicLink %}[see more]({{proposal.publicLink}}){% endif %}
{% endfor %}


{% if event.cfp.active %}
---

Propose your talks for the next sessions on [Gospeak]({{event.cfp.publicLink}})
{% endif %}"""
  }
  proposal {
    tweet = """Presentation of "{{proposal.title}}" by {% for speaker in proposal.speakers %}{% if forloop.index == 1 %}{% elsif forloop.last == true %} and {% else %}, {% endif %}{% if links.twitter %}{{links.twitter.handle}}{% else %}{{links.twitter.name}}{% endif %}{% endfor %}"""
  }
}

scheduler {
  # tweet-random-video = "0 0 9 * * ?" # every day at 9 AM (09:00:00)
  tweet-random-video = "0 0 0 1 1 ? 1970" # on Jan 1st 1970 => never ^^
  tweet-random-video = ${?SCHEDULE_RANDOM_VIDEO_TWEET}
}

include file("local/application.local.conf")
