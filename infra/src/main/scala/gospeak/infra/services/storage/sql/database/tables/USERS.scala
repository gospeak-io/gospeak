package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class USERS private(getAlias: Option[String] = Some("u")) extends Table.SqlTable("PUBLIC", "users", getAlias) {
  type Self = USERS

  val ID: SqlField[User.Id, USERS] = new SqlField[User.Id, USERS](this, "id") // CHAR(36) NOT NULL
  val SLUG: SqlField[User.Slug, USERS] = new SqlField[User.Slug, USERS](this, "slug") // VARCHAR(120) NOT NULL
  val STATUS: SqlField[User.Status, USERS] = new SqlField[User.Status, USERS](this, "status") // VARCHAR(10) NOT NULL
  val FIRST_NAME: SqlField[String, USERS] = new SqlField[String, USERS](this, "first_name") // VARCHAR(120) NOT NULL
  val LAST_NAME: SqlField[String, USERS] = new SqlField[String, USERS](this, "last_name") // VARCHAR(120) NOT NULL
  val EMAIL: SqlField[EmailAddress, USERS] = new SqlField[EmailAddress, USERS](this, "email") // VARCHAR(120) NOT NULL
  val EMAIL_VALIDATED: SqlFieldOpt[Instant, USERS] = new SqlFieldOpt[Instant, USERS](this, "email_validated") // TIMESTAMP
  val EMAIL_VALIDATION_BEFORE_LOGIN: SqlField[Boolean, USERS] = new SqlField[Boolean, USERS](this, "email_validation_before_login") // BOOLEAN NOT NULL
  val AVATAR: SqlField[Avatar, USERS] = new SqlField[Avatar, USERS](this, "avatar") // VARCHAR(1024) NOT NULL
  val TITLE: SqlFieldOpt[String, USERS] = new SqlFieldOpt[String, USERS](this, "title") // VARCHAR(1024)
  val BIO: SqlFieldOpt[Markdown, USERS] = new SqlFieldOpt[Markdown, USERS](this, "bio") // VARCHAR(4096)
  val MENTORING: SqlFieldOpt[Markdown, USERS] = new SqlFieldOpt[Markdown, USERS](this, "mentoring") // VARCHAR(4096)
  val COMPANY: SqlFieldOpt[String, USERS] = new SqlFieldOpt[String, USERS](this, "company") // VARCHAR(36)
  val LOCATION: SqlFieldOpt[String, USERS] = new SqlFieldOpt[String, USERS](this, "location") // VARCHAR(36)
  val PHONE: SqlFieldOpt[String, USERS] = new SqlFieldOpt[String, USERS](this, "phone") // VARCHAR(36)
  val WEBSITE: SqlFieldOpt[Url, USERS] = new SqlFieldOpt[Url, USERS](this, "website") // VARCHAR(1024)
  val SOCIAL_FACEBOOK: SqlFieldOpt[FacebookAccount, USERS] = new SqlFieldOpt[FacebookAccount, USERS](this, "social_facebook") // VARCHAR(1024)
  val SOCIAL_INSTAGRAM: SqlFieldOpt[InstagramAccount, USERS] = new SqlFieldOpt[InstagramAccount, USERS](this, "social_instagram") // VARCHAR(1024)
  val SOCIAL_TWITTER: SqlFieldOpt[TwitterAccount, USERS] = new SqlFieldOpt[TwitterAccount, USERS](this, "social_twitter") // VARCHAR(1024)
  val SOCIAL_LINKEDIN: SqlFieldOpt[LinkedInAccount, USERS] = new SqlFieldOpt[LinkedInAccount, USERS](this, "social_linkedIn") // VARCHAR(1024)
  val SOCIAL_YOUTUBE: SqlFieldOpt[YoutubeAccount, USERS] = new SqlFieldOpt[YoutubeAccount, USERS](this, "social_youtube") // VARCHAR(1024)
  val SOCIAL_MEETUP: SqlFieldOpt[MeetupAccount, USERS] = new SqlFieldOpt[MeetupAccount, USERS](this, "social_meetup") // VARCHAR(1024)
  val SOCIAL_EVENTBRITE: SqlFieldOpt[EventbriteAccount, USERS] = new SqlFieldOpt[EventbriteAccount, USERS](this, "social_eventbrite") // VARCHAR(1024)
  val SOCIAL_SLACK: SqlFieldOpt[SlackAccount, USERS] = new SqlFieldOpt[SlackAccount, USERS](this, "social_slack") // VARCHAR(1024)
  val SOCIAL_DISCORD: SqlFieldOpt[DiscordAccount, USERS] = new SqlFieldOpt[DiscordAccount, USERS](this, "social_discord") // VARCHAR(1024)
  val SOCIAL_GITHUB: SqlFieldOpt[GithubAccount, USERS] = new SqlFieldOpt[GithubAccount, USERS](this, "social_github") // VARCHAR(1024)
  val CREATED_AT: SqlField[Instant, USERS] = new SqlField[Instant, USERS](this, "created_at") // TIMESTAMP NOT NULL
  val UPDATED_AT: SqlField[Instant, USERS] = new SqlField[Instant, USERS](this, "updated_at") // TIMESTAMP NOT NULL

  override def getFields: List[SqlField[_, USERS]] = List(ID, SLUG, STATUS, FIRST_NAME, LAST_NAME, EMAIL, EMAIL_VALIDATED, EMAIL_VALIDATION_BEFORE_LOGIN, AVATAR, TITLE, BIO, MENTORING, COMPANY, LOCATION, PHONE, WEBSITE, SOCIAL_FACEBOOK, SOCIAL_INSTAGRAM, SOCIAL_TWITTER, SOCIAL_LINKEDIN, SOCIAL_YOUTUBE, SOCIAL_MEETUP, SOCIAL_EVENTBRITE, SOCIAL_SLACK, SOCIAL_DISCORD, SOCIAL_GITHUB, CREATED_AT, UPDATED_AT)

  override def getSorts: List[Sort] = List(Sort("name", "name", NonEmptyList.of(LAST_NAME.asc, FIRST_NAME.asc)))

  override def searchOn: List[SqlField[_, USERS]] = List(ID, SLUG, FIRST_NAME, LAST_NAME, EMAIL, TITLE, BIO, MENTORING)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): USERS = new USERS(Some(alias))
}

private[database] object USERS {
  val table = new USERS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
