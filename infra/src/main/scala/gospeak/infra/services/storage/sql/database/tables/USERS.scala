package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class USERS private(getAlias: Option[String] = Some("u")) extends Table.SqlTable("PUBLIC", "users", getAlias) {
  type Self = USERS

  val ID: SqlField[User.Id, USERS] = SqlField(this, "id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 1)
  val SLUG: SqlField[User.Slug, USERS] = SqlField(this, "slug", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 2)
  val STATUS: SqlField[User.Status, USERS] = SqlField(this, "status", "VARCHAR(10) NOT NULL", JdbcType.VarChar, nullable = false, 3)
  val FIRST_NAME: SqlField[String, USERS] = SqlField(this, "first_name", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 4)
  val LAST_NAME: SqlField[String, USERS] = SqlField(this, "last_name", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 5)
  val EMAIL: SqlField[EmailAddress, USERS] = SqlField(this, "email", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 6)
  val EMAIL_VALIDATED: SqlField[Instant, USERS] = SqlField(this, "email_validated", "TIMESTAMP", JdbcType.Timestamp, nullable = true, 7)
  val EMAIL_VALIDATION_BEFORE_LOGIN: SqlField[Boolean, USERS] = SqlField(this, "email_validation_before_login", "BOOLEAN NOT NULL", JdbcType.Boolean, nullable = false, 8)
  val AVATAR: SqlField[Avatar, USERS] = SqlField(this, "avatar", "VARCHAR(1024) NOT NULL", JdbcType.VarChar, nullable = false, 9)
  val TITLE: SqlField[String, USERS] = SqlField(this, "title", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 27)
  val BIO: SqlField[Markdown, USERS] = SqlField(this, "bio", "VARCHAR(4096)", JdbcType.VarChar, nullable = true, 10)
  val MENTORING: SqlField[Markdown, USERS] = SqlField(this, "mentoring", "VARCHAR(4096)", JdbcType.VarChar, nullable = true, 28)
  val COMPANY: SqlField[String, USERS] = SqlField(this, "company", "VARCHAR(36)", JdbcType.VarChar, nullable = true, 11)
  val LOCATION: SqlField[String, USERS] = SqlField(this, "location", "VARCHAR(36)", JdbcType.VarChar, nullable = true, 12)
  val PHONE: SqlField[String, USERS] = SqlField(this, "phone", "VARCHAR(36)", JdbcType.VarChar, nullable = true, 13)
  val WEBSITE: SqlField[Url, USERS] = SqlField(this, "website", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 14)
  val SOCIAL_FACEBOOK: SqlField[FacebookAccount, USERS] = SqlField(this, "social_facebook", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 15)
  val SOCIAL_INSTAGRAM: SqlField[InstagramAccount, USERS] = SqlField(this, "social_instagram", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 16)
  val SOCIAL_TWITTER: SqlField[TwitterAccount, USERS] = SqlField(this, "social_twitter", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 17)
  val SOCIAL_LINKEDIN: SqlField[LinkedInAccount, USERS] = SqlField(this, "social_linkedIn", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 18)
  val SOCIAL_YOUTUBE: SqlField[YoutubeAccount, USERS] = SqlField(this, "social_youtube", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 19)
  val SOCIAL_MEETUP: SqlField[MeetupAccount, USERS] = SqlField(this, "social_meetup", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 20)
  val SOCIAL_EVENTBRITE: SqlField[EventbriteAccount, USERS] = SqlField(this, "social_eventbrite", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 21)
  val SOCIAL_SLACK: SqlField[SlackAccount, USERS] = SqlField(this, "social_slack", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 22)
  val SOCIAL_DISCORD: SqlField[DiscordAccount, USERS] = SqlField(this, "social_discord", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 23)
  val SOCIAL_GITHUB: SqlField[GithubAccount, USERS] = SqlField(this, "social_github", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 24)
  val CREATED_AT: SqlField[Instant, USERS] = SqlField(this, "created_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 25)
  val UPDATED_AT: SqlField[Instant, USERS] = SqlField(this, "updated_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 26)

  override def getFields: List[SqlField[_, USERS]] = List(ID, SLUG, STATUS, FIRST_NAME, LAST_NAME, EMAIL, EMAIL_VALIDATED, EMAIL_VALIDATION_BEFORE_LOGIN, AVATAR, TITLE, BIO, MENTORING, COMPANY, LOCATION, PHONE, WEBSITE, SOCIAL_FACEBOOK, SOCIAL_INSTAGRAM, SOCIAL_TWITTER, SOCIAL_LINKEDIN, SOCIAL_YOUTUBE, SOCIAL_MEETUP, SOCIAL_EVENTBRITE, SOCIAL_SLACK, SOCIAL_DISCORD, SOCIAL_GITHUB, CREATED_AT, UPDATED_AT)

  override def getSorts: List[Sort] = List(Sort("name", "name", NonEmptyList.of(LAST_NAME.asc, FIRST_NAME.asc)))

  override def searchOn: List[SqlField[_, USERS]] = List(ID, SLUG, FIRST_NAME, LAST_NAME, EMAIL, TITLE, BIO, MENTORING)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): USERS = new USERS(Some(alias))
}

private[database] object USERS {
  val table = new USERS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
