package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class EXTERNAL_EVENTS private(getAlias: Option[String] = Some("ee")) extends Table.SqlTable("PUBLIC", "external_events", getAlias) {
  type Self = EXTERNAL_EVENTS

  val ID: SqlField[ExternalEvent.Id, EXTERNAL_EVENTS] = new SqlField[ExternalEvent.Id, EXTERNAL_EVENTS](this, "id") // CHAR(36) NOT NULL
  val NAME: SqlField[Event.Name, EXTERNAL_EVENTS] = new SqlField[Event.Name, EXTERNAL_EVENTS](this, "name") // VARCHAR(120) NOT NULL
  val KIND: SqlField[Event.Kind, EXTERNAL_EVENTS] = new SqlField[Event.Kind, EXTERNAL_EVENTS](this, "kind") // VARCHAR(12) DEFAULT 'Conference' NOT NULL
  val LOGO: SqlFieldOpt[Logo, EXTERNAL_EVENTS] = new SqlFieldOpt[Logo, EXTERNAL_EVENTS](this, "logo") // VARCHAR(1024)
  val DESCRIPTION: SqlField[Markdown, EXTERNAL_EVENTS] = new SqlField[Markdown, EXTERNAL_EVENTS](this, "description") // VARCHAR(4096) NOT NULL
  val START: SqlFieldOpt[LocalDateTime, EXTERNAL_EVENTS] = new SqlFieldOpt[LocalDateTime, EXTERNAL_EVENTS](this, "start") // TIMESTAMP
  val FINISH: SqlFieldOpt[LocalDateTime, EXTERNAL_EVENTS] = new SqlFieldOpt[LocalDateTime, EXTERNAL_EVENTS](this, "finish") // TIMESTAMP
  val LOCATION: SqlFieldOpt[GMapPlace, EXTERNAL_EVENTS] = new SqlFieldOpt[GMapPlace, EXTERNAL_EVENTS](this, "location") // VARCHAR(4096)
  val LOCATION_ID: SqlFieldOpt[String, EXTERNAL_EVENTS] = new SqlFieldOpt[String, EXTERNAL_EVENTS](this, "location_id") // VARCHAR(150)
  val LOCATION_LAT: SqlFieldOpt[Double, EXTERNAL_EVENTS] = new SqlFieldOpt[Double, EXTERNAL_EVENTS](this, "location_lat") // DOUBLE PRECISION
  val LOCATION_LNG: SqlFieldOpt[Double, EXTERNAL_EVENTS] = new SqlFieldOpt[Double, EXTERNAL_EVENTS](this, "location_lng") // DOUBLE PRECISION
  val LOCATION_LOCALITY: SqlFieldOpt[String, EXTERNAL_EVENTS] = new SqlFieldOpt[String, EXTERNAL_EVENTS](this, "location_locality") // VARCHAR(50)
  val LOCATION_COUNTRY: SqlFieldOpt[String, EXTERNAL_EVENTS] = new SqlFieldOpt[String, EXTERNAL_EVENTS](this, "location_country") // VARCHAR(30)
  val URL: SqlFieldOpt[Url, EXTERNAL_EVENTS] = new SqlFieldOpt[Url, EXTERNAL_EVENTS](this, "url") // VARCHAR(1024)
  val TICKETS_URL: SqlFieldOpt[Url, EXTERNAL_EVENTS] = new SqlFieldOpt[Url, EXTERNAL_EVENTS](this, "tickets_url") // VARCHAR(1024)
  val VIDEOS_URL: SqlFieldOpt[Url.Videos, EXTERNAL_EVENTS] = new SqlFieldOpt[Url.Videos, EXTERNAL_EVENTS](this, "videos_url") // VARCHAR(1024)
  val TWITTER_ACCOUNT: SqlFieldOpt[TwitterAccount, EXTERNAL_EVENTS] = new SqlFieldOpt[TwitterAccount, EXTERNAL_EVENTS](this, "twitter_account") // VARCHAR(120)
  val TWITTER_HASHTAG: SqlFieldOpt[TwitterHashtag, EXTERNAL_EVENTS] = new SqlFieldOpt[TwitterHashtag, EXTERNAL_EVENTS](this, "twitter_hashtag") // VARCHAR(120)
  val TAGS: SqlField[List[Tag], EXTERNAL_EVENTS] = new SqlField[List[Tag], EXTERNAL_EVENTS](this, "tags") // VARCHAR(150) NOT NULL
  val CREATED_AT: SqlField[Instant, EXTERNAL_EVENTS] = new SqlField[Instant, EXTERNAL_EVENTS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, EXTERNAL_EVENTS, USERS] = new SqlFieldRef[User.Id, EXTERNAL_EVENTS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, EXTERNAL_EVENTS] = new SqlField[Instant, EXTERNAL_EVENTS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, EXTERNAL_EVENTS, USERS] = new SqlFieldRef[User.Id, EXTERNAL_EVENTS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, EXTERNAL_EVENTS]] = List(ID, NAME, KIND, LOGO, DESCRIPTION, START, FINISH, LOCATION, LOCATION_ID, LOCATION_LAT, LOCATION_LNG, LOCATION_LOCALITY, LOCATION_COUNTRY, URL, TICKETS_URL, VIDEOS_URL, TWITTER_ACCOUNT, TWITTER_HASHTAG, TAGS, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("start", "start", NonEmptyList.of(START.desc, NAME.asc)))

  override def searchOn: List[SqlField[_, EXTERNAL_EVENTS]] = List(ID, NAME, DESCRIPTION, LOCATION, URL, TWITTER_ACCOUNT, TWITTER_HASHTAG, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): EXTERNAL_EVENTS = new EXTERNAL_EVENTS(Some(alias))
}

private[database] object EXTERNAL_EVENTS {
  val table = new EXTERNAL_EVENTS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
