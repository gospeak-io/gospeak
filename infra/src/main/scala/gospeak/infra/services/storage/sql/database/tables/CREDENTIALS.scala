package gospeak.infra.services.storage.sql.database.tables

import java.time.LocalDateTime

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class CREDENTIALS private(getAlias: Option[String] = Some("cd")) extends Table.SqlTable("PUBLIC", "credentials", getAlias) {
  type Self = CREDENTIALS

  val PROVIDER_ID: SqlField[User.ProviderId, CREDENTIALS] = new SqlField[User.ProviderId, CREDENTIALS](this, "provider_id") // VARCHAR(30) NOT NULL
  val PROVIDER_KEY: SqlField[User.ProviderKey, CREDENTIALS] = new SqlField[User.ProviderKey, CREDENTIALS](this, "provider_key") // VARCHAR(100) NOT NULL
  val HASHER: SqlField[User.Hasher, CREDENTIALS] = new SqlField[User.Hasher, CREDENTIALS](this, "hasher") // VARCHAR(100) NOT NULL
  val PASSWORD: SqlField[User.PasswordValue, CREDENTIALS] = new SqlField[User.PasswordValue, CREDENTIALS](this, "password") // VARCHAR(100) NOT NULL
  val SALT: SqlFieldOpt[User.Salt, CREDENTIALS] = new SqlFieldOpt[User.Salt, CREDENTIALS](this, "salt") // VARCHAR(100)

  override def getFields: List[SqlField[_, CREDENTIALS]] = List(PROVIDER_ID, PROVIDER_KEY, HASHER, PASSWORD, SALT)

  override def getSorts: List[Sort] = List(Sort("provider", "provider", NonEmptyList.of(PROVIDER_ID.asc, PROVIDER_KEY.asc)))

  override def searchOn: List[SqlField[_, CREDENTIALS]] = List(PROVIDER_ID, PROVIDER_KEY, HASHER, PASSWORD, SALT)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): CREDENTIALS = new CREDENTIALS(Some(alias))
}

private[database] object CREDENTIALS {
  val table = new CREDENTIALS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
