package gospeak.infra.services.storage.sql.database.tables

import java.time.LocalDateTime

import cats.data.NonEmptyList
import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class CREDENTIALS private(getAlias: Option[String] = Some("cd")) extends Table.SqlTable("PUBLIC", "credentials", getAlias) {
  type Self = CREDENTIALS

  val PROVIDER_ID: SqlFieldRaw[User.ProviderId, CREDENTIALS] = SqlField(this, "provider_id", "VARCHAR(30) NOT NULL", JdbcType.VarChar, nullable = false, 1)
  val PROVIDER_KEY: SqlFieldRaw[User.ProviderKey, CREDENTIALS] = SqlField(this, "provider_key", "VARCHAR(100) NOT NULL", JdbcType.VarChar, nullable = false, 2)
  val HASHER: SqlFieldRaw[User.Hasher, CREDENTIALS] = SqlField(this, "hasher", "VARCHAR(100) NOT NULL", JdbcType.VarChar, nullable = false, 3)
  val PASSWORD: SqlFieldRaw[User.PasswordValue, CREDENTIALS] = SqlField(this, "password", "VARCHAR(100) NOT NULL", JdbcType.VarChar, nullable = false, 4)
  val SALT: SqlFieldRaw[User.Salt, CREDENTIALS] = SqlField(this, "salt", "VARCHAR(100)", JdbcType.VarChar, nullable = true, 5)

  override def getFields: List[SqlField[_, CREDENTIALS]] = List(PROVIDER_ID, PROVIDER_KEY, HASHER, PASSWORD, SALT)

  override def getSorts: List[Sort] = List(Sort("provider", "provider", NonEmptyList.of(PROVIDER_ID.asc, PROVIDER_KEY.asc)))

  override def searchOn: List[SqlField[_, CREDENTIALS]] = List(PROVIDER_ID, PROVIDER_KEY, HASHER, PASSWORD, SALT)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): CREDENTIALS = new CREDENTIALS(Some(alias))
}

private[database] object CREDENTIALS {
  val table = new CREDENTIALS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
