package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class GROUP_SETTINGS private(getAlias: Option[String] = Some("gs")) extends Table.SqlTable("PUBLIC", "group_settings", getAlias) {
  type Self = GROUP_SETTINGS

  val GROUP_ID: SqlFieldRef[Group.Id, GROUP_SETTINGS, GROUPS] = new SqlFieldRef[Group.Id, GROUP_SETTINGS, GROUPS](this, "group_id", GROUPS.table.ID) // CHAR(36) NOT NULL
  val MEETUP_ACCESS_TOKEN: SqlFieldOpt[Crypted, GROUP_SETTINGS] = new SqlFieldOpt[Crypted, GROUP_SETTINGS](this, "meetup_access_token") // VARCHAR(200)
  val MEETUP_REFRESH_TOKEN: SqlFieldOpt[Crypted, GROUP_SETTINGS] = new SqlFieldOpt[Crypted, GROUP_SETTINGS](this, "meetup_refresh_token") // VARCHAR(200)
  val MEETUP_GROUP_SLUG: SqlFieldOpt[MeetupGroup.Slug, GROUP_SETTINGS] = new SqlFieldOpt[MeetupGroup.Slug, GROUP_SETTINGS](this, "meetup_group_slug") // VARCHAR(120)
  val MEETUP_LOGGED_USER_ID: SqlFieldOpt[MeetupUser.Id, GROUP_SETTINGS] = new SqlFieldOpt[MeetupUser.Id, GROUP_SETTINGS](this, "meetup_logged_user_id") // BIGINT
  val MEETUP_LOGGED_USER_NAME: SqlFieldOpt[String, GROUP_SETTINGS] = new SqlFieldOpt[String, GROUP_SETTINGS](this, "meetup_logged_user_name") // VARCHAR(120)
  val SLACK_TOKEN: SqlFieldOpt[SlackToken, GROUP_SETTINGS] = new SqlFieldOpt[SlackToken, GROUP_SETTINGS](this, "slack_token") // VARCHAR(200)
  val SLACK_BOT_NAME: SqlFieldOpt[String, GROUP_SETTINGS] = new SqlFieldOpt[String, GROUP_SETTINGS](this, "slack_bot_name") // VARCHAR(120)
  val SLACK_BOT_AVATAR: SqlFieldOpt[Avatar, GROUP_SETTINGS] = new SqlFieldOpt[Avatar, GROUP_SETTINGS](this, "slack_bot_avatar") // VARCHAR(1024)
  val EVENT_DESCRIPTION: SqlField[LiquidMarkdown[Message.EventInfo], GROUP_SETTINGS] = new SqlField[LiquidMarkdown[Message.EventInfo], GROUP_SETTINGS](this, "event_description") // VARCHAR NOT NULL
  val EVENT_TEMPLATES: SqlField[Map[String, Liquid[Message.EventInfo]], GROUP_SETTINGS] = new SqlField[Map[String, Liquid[Message.EventInfo]], GROUP_SETTINGS](this, "event_templates") // VARCHAR NOT NULL
  val PROPOSAL_TWEET: SqlField[Liquid[Message.ProposalInfo], GROUP_SETTINGS] = new SqlField[Liquid[Message.ProposalInfo], GROUP_SETTINGS](this, "proposal_tweet") // VARCHAR DEFAULT 'Presentation of "{{proposal.title}}" by{{#proposal.speakers}}{{^-first}} and{{/-first}} {{#links.twitter}}{{handle}}{{/links.twitter}}{{^links.twitter}}{{name}}{{/links.twitter}}{{/proposal.speakers}}' NOT NULL
  val ACTIONS: SqlField[Map[Group.Settings.Action.Trigger, List[Group.Settings.Action]], GROUP_SETTINGS] = new SqlField[Map[Group.Settings.Action.Trigger, List[Group.Settings.Action]], GROUP_SETTINGS](this, "actions") // VARCHAR NOT NULL
  val UPDATED_AT: SqlField[Instant, GROUP_SETTINGS] = new SqlField[Instant, GROUP_SETTINGS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, GROUP_SETTINGS, USERS] = new SqlFieldRef[User.Id, GROUP_SETTINGS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, GROUP_SETTINGS]] = List(GROUP_ID, MEETUP_ACCESS_TOKEN, MEETUP_REFRESH_TOKEN, MEETUP_GROUP_SLUG, MEETUP_LOGGED_USER_ID, MEETUP_LOGGED_USER_NAME, SLACK_TOKEN, SLACK_BOT_NAME, SLACK_BOT_AVATAR, EVENT_DESCRIPTION, EVENT_TEMPLATES, PROPOSAL_TWEET, ACTIONS, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("group-id", "group_id", NonEmptyList.of(GROUP_ID.asc)))

  override def searchOn: List[SqlField[_, GROUP_SETTINGS]] = List(GROUP_ID, MEETUP_ACCESS_TOKEN, MEETUP_REFRESH_TOKEN, MEETUP_GROUP_SLUG, MEETUP_LOGGED_USER_ID, MEETUP_LOGGED_USER_NAME, SLACK_TOKEN, SLACK_BOT_NAME, SLACK_BOT_AVATAR, EVENT_DESCRIPTION, EVENT_TEMPLATES, PROPOSAL_TWEET, ACTIONS, UPDATED_AT, UPDATED_BY)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): GROUP_SETTINGS = new GROUP_SETTINGS(Some(alias))
}

private[database] object GROUP_SETTINGS {
  val table = new GROUP_SETTINGS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
