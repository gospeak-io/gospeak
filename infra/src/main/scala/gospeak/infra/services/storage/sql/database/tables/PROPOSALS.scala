package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class PROPOSALS private(getAlias: Option[String] = Some("p")) extends Table.SqlTable("PUBLIC", "proposals", getAlias) {
  type Self = PROPOSALS

  val ID: SqlField[Proposal.Id, PROPOSALS] = SqlField(this, "id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 1)
  val TALK_ID: SqlFieldRef[Talk.Id, PROPOSALS, TALKS] = SqlField(this, "talk_id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 2, TALKS.table.ID)
  val CFP_ID: SqlFieldRef[Cfp.Id, PROPOSALS, CFPS] = SqlField(this, "cfp_id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 3, CFPS.table.ID)
  val EVENT_ID: SqlFieldRef[Event.Id, PROPOSALS, EVENTS] = SqlField(this, "event_id", "CHAR(36)", JdbcType.Char, nullable = true, 4, EVENTS.table.ID)
  val STATUS: SqlField[Proposal.Status, PROPOSALS] = SqlField(this, "status", "VARCHAR(10) NOT NULL", JdbcType.VarChar, nullable = false, 5)
  val TITLE: SqlField[Talk.Title, PROPOSALS] = SqlField(this, "title", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 6)
  val DURATION: SqlField[FiniteDuration, PROPOSALS] = SqlField(this, "duration", "BIGINT NOT NULL", JdbcType.BigInt, nullable = false, 7)
  val DESCRIPTION: SqlField[Markdown, PROPOSALS] = SqlField(this, "description", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 8)
  val MESSAGE: SqlField[Markdown, PROPOSALS] = SqlField(this, "message", "VARCHAR(4096) DEFAULT '' NOT NULL", JdbcType.VarChar, nullable = false, 18)
  val SPEAKERS: SqlField[NonEmptyList[User.Id], PROPOSALS] = SqlField(this, "speakers", "VARCHAR(184) NOT NULL", JdbcType.VarChar, nullable = false, 9)
  val SLIDES: SqlField[Url.Slides, PROPOSALS] = SqlField(this, "slides", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 10)
  val VIDEO: SqlField[Url.Video, PROPOSALS] = SqlField(this, "video", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 11)
  val TAGS: SqlField[List[Tag], PROPOSALS] = SqlField(this, "tags", "VARCHAR(150) NOT NULL", JdbcType.VarChar, nullable = false, 12)
  val ORGA_TAGS: SqlField[List[Tag], PROPOSALS] = SqlField(this, "orga_tags", "VARCHAR(150) DEFAULT '' NOT NULL", JdbcType.VarChar, nullable = false, 17)
  val CREATED_AT: SqlField[Instant, PROPOSALS] = SqlField(this, "created_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 13)
  val CREATED_BY: SqlFieldRef[User.Id, PROPOSALS, USERS] = SqlField(this, "created_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 14, USERS.table.ID)
  val UPDATED_AT: SqlField[Instant, PROPOSALS] = SqlField(this, "updated_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 15)
  val UPDATED_BY: SqlFieldRef[User.Id, PROPOSALS, USERS] = SqlField(this, "updated_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 16, USERS.table.ID)

  override def getFields: List[SqlField[_, PROPOSALS]] = List(ID, TALK_ID, CFP_ID, EVENT_ID, STATUS, TITLE, DURATION, DESCRIPTION, MESSAGE, SPEAKERS, SLIDES, VIDEO, TAGS, ORGA_TAGS, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("created", "created", NonEmptyList.of(CREATED_AT.desc)))

  override def searchOn: List[SqlField[_, PROPOSALS]] = List(ID, TITLE, STATUS, DESCRIPTION, MESSAGE, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): PROPOSALS = new PROPOSALS(Some(alias))
}

private[database] object PROPOSALS {
  val table = new PROPOSALS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
