package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class PROPOSALS private(getAlias: Option[String] = Some("p")) extends Table.SqlTable("PUBLIC", "proposals", getAlias) {
  type Self = PROPOSALS

  val ID: SqlField[Proposal.Id, PROPOSALS] = new SqlField[Proposal.Id, PROPOSALS](this, "id") // CHAR(36) NOT NULL
  val TALK_ID: SqlFieldRef[Talk.Id, PROPOSALS, TALKS] = new SqlFieldRef[Talk.Id, PROPOSALS, TALKS](this, "talk_id", TALKS.table.ID) // CHAR(36) NOT NULL
  val CFP_ID: SqlFieldRef[Cfp.Id, PROPOSALS, CFPS] = new SqlFieldRef[Cfp.Id, PROPOSALS, CFPS](this, "cfp_id", CFPS.table.ID) // CHAR(36) NOT NULL
  val EVENT_ID: SqlFieldRefOpt[Event.Id, PROPOSALS, EVENTS] = new SqlFieldRefOpt[Event.Id, PROPOSALS, EVENTS](this, "event_id", EVENTS.table.ID) // CHAR(36)
  val STATUS: SqlField[Proposal.Status, PROPOSALS] = new SqlField[Proposal.Status, PROPOSALS](this, "status") // VARCHAR(10) NOT NULL
  val TITLE: SqlField[Talk.Title, PROPOSALS] = new SqlField[Talk.Title, PROPOSALS](this, "title") // VARCHAR(120) NOT NULL
  val DURATION: SqlField[FiniteDuration, PROPOSALS] = new SqlField[FiniteDuration, PROPOSALS](this, "duration") // BIGINT NOT NULL
  val DESCRIPTION: SqlField[Markdown, PROPOSALS] = new SqlField[Markdown, PROPOSALS](this, "description") // VARCHAR(4096) NOT NULL
  val MESSAGE: SqlField[Markdown, PROPOSALS] = new SqlField[Markdown, PROPOSALS](this, "message") // VARCHAR(4096) DEFAULT '' NOT NULL
  val SPEAKERS: SqlField[NonEmptyList[User.Id], PROPOSALS] = new SqlField[NonEmptyList[User.Id], PROPOSALS](this, "speakers") // VARCHAR(184) NOT NULL
  val SLIDES: SqlFieldOpt[Url.Slides, PROPOSALS] = new SqlFieldOpt[Url.Slides, PROPOSALS](this, "slides") // VARCHAR(1024)
  val VIDEO: SqlFieldOpt[Url.Video, PROPOSALS] = new SqlFieldOpt[Url.Video, PROPOSALS](this, "video") // VARCHAR(1024)
  val TAGS: SqlField[List[Tag], PROPOSALS] = new SqlField[List[Tag], PROPOSALS](this, "tags") // VARCHAR(150) NOT NULL
  val ORGA_TAGS: SqlField[List[Tag], PROPOSALS] = new SqlField[List[Tag], PROPOSALS](this, "orga_tags") // VARCHAR(150) DEFAULT '' NOT NULL
  val CREATED_AT: SqlField[Instant, PROPOSALS] = new SqlField[Instant, PROPOSALS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, PROPOSALS, USERS] = new SqlFieldRef[User.Id, PROPOSALS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, PROPOSALS] = new SqlField[Instant, PROPOSALS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, PROPOSALS, USERS] = new SqlFieldRef[User.Id, PROPOSALS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, PROPOSALS]] = List(ID, TALK_ID, CFP_ID, EVENT_ID, STATUS, TITLE, DURATION, DESCRIPTION, MESSAGE, SPEAKERS, SLIDES, VIDEO, TAGS, ORGA_TAGS, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("created", "created", NonEmptyList.of(CREATED_AT.desc)))

  override def searchOn: List[SqlField[_, PROPOSALS]] = List(ID, TITLE, STATUS, DESCRIPTION, MESSAGE, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): PROPOSALS = new PROPOSALS(Some(alias))
}

private[database] object PROPOSALS {
  val table = new PROPOSALS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
