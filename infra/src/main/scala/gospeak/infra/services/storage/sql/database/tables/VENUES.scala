package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class VENUES private(getAlias: Option[String] = Some("v")) extends Table.SqlTable("PUBLIC", "venues", getAlias) {
  type Self = VENUES

  val ID: SqlField[Venue.Id, VENUES] = new SqlField[Venue.Id, VENUES](this, "id") // CHAR(36) NOT NULL
  val PARTNER_ID: SqlFieldRef[Partner.Id, VENUES, PARTNERS] = new SqlFieldRef[Partner.Id, VENUES, PARTNERS](this, "partner_id", PARTNERS.table.ID) // CHAR(36) NOT NULL
  val CONTACT_ID: SqlFieldRefOpt[Contact.Id, VENUES, CONTACTS] = new SqlFieldRefOpt[Contact.Id, VENUES, CONTACTS](this, "contact_id", CONTACTS.table.ID) // CHAR(36)
  val ADDRESS: SqlField[GMapPlace, VENUES] = new SqlField[GMapPlace, VENUES](this, "address") // VARCHAR(4096) NOT NULL
  val ADDRESS_ID: SqlField[String, VENUES] = new SqlField[String, VENUES](this, "address_id") // VARCHAR(150) DEFAULT '' NOT NULL
  val ADDRESS_LAT: SqlField[Double, VENUES] = new SqlField[Double, VENUES](this, "address_lat") // DOUBLE PRECISION NOT NULL
  val ADDRESS_LNG: SqlField[Double, VENUES] = new SqlField[Double, VENUES](this, "address_lng") // DOUBLE PRECISION NOT NULL
  val ADDRESS_LOCALITY: SqlFieldOpt[String, VENUES] = new SqlFieldOpt[String, VENUES](this, "address_locality") // VARCHAR(150)
  val ADDRESS_COUNTRY: SqlField[String, VENUES] = new SqlField[String, VENUES](this, "address_country") // VARCHAR(30) NOT NULL
  val NOTES: SqlField[Markdown, VENUES] = new SqlField[Markdown, VENUES](this, "notes") // VARCHAR(4096) NOT NULL
  val ROOM_SIZE: SqlFieldOpt[Int, VENUES] = new SqlFieldOpt[Int, VENUES](this, "room_size") // INT
  val MEETUPGROUP: SqlFieldOpt[MeetupGroup.Slug, VENUES] = new SqlFieldOpt[MeetupGroup.Slug, VENUES](this, "meetupGroup") // VARCHAR(80)
  val MEETUPVENUE: SqlFieldOpt[MeetupVenue.Id, VENUES] = new SqlFieldOpt[MeetupVenue.Id, VENUES](this, "meetupVenue") // BIGINT
  val CREATED_AT: SqlField[Instant, VENUES] = new SqlField[Instant, VENUES](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, VENUES, USERS] = new SqlFieldRef[User.Id, VENUES, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, VENUES] = new SqlField[Instant, VENUES](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, VENUES, USERS] = new SqlFieldRef[User.Id, VENUES, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, VENUES]] = List(ID, PARTNER_ID, CONTACT_ID, ADDRESS, ADDRESS_ID, ADDRESS_LAT, ADDRESS_LNG, ADDRESS_LOCALITY, ADDRESS_COUNTRY, NOTES, ROOM_SIZE, MEETUPGROUP, MEETUPVENUE, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("created", "created", NonEmptyList.of(CREATED_AT.asc)))

  override def searchOn: List[SqlField[_, VENUES]] = List(ID, ADDRESS, NOTES)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): VENUES = new VENUES(Some(alias))
}

private[database] object VENUES {
  val table = new VENUES() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
