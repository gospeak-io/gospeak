package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class VENUES private(getAlias: Option[String] = Some("v")) extends Table.SqlTable("PUBLIC", "venues", getAlias) {
  type Self = VENUES

  val ID: SqlField[Venue.Id, VENUES] = SqlField(this, "id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 1)
  val PARTNER_ID: SqlFieldRef[Partner.Id, VENUES, PARTNERS] = SqlField(this, "partner_id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 2, PARTNERS.table.ID)
  val CONTACT_ID: SqlFieldRef[Contact.Id, VENUES, CONTACTS] = SqlField(this, "contact_id", "CHAR(36)", JdbcType.Char, nullable = true, 3, CONTACTS.table.ID)
  val ADDRESS: SqlField[GMapPlace, VENUES] = SqlField(this, "address", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 4)
  val ADDRESS_ID: SqlField[String, VENUES] = SqlField(this, "address_id", "VARCHAR(150) DEFAULT '' NOT NULL", JdbcType.VarChar, nullable = false, 16)
  val ADDRESS_LAT: SqlField[Double, VENUES] = SqlField(this, "address_lat", "DOUBLE PRECISION NOT NULL", JdbcType.Double, nullable = false, 5)
  val ADDRESS_LNG: SqlField[Double, VENUES] = SqlField(this, "address_lng", "DOUBLE PRECISION NOT NULL", JdbcType.Double, nullable = false, 6)
  val ADDRESS_LOCALITY: SqlField[String, VENUES] = SqlField(this, "address_locality", "VARCHAR(150)", JdbcType.VarChar, nullable = true, 17)
  val ADDRESS_COUNTRY: SqlField[String, VENUES] = SqlField(this, "address_country", "VARCHAR(30) NOT NULL", JdbcType.VarChar, nullable = false, 7)
  val NOTES: SqlField[Markdown, VENUES] = SqlField(this, "notes", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 8)
  val ROOM_SIZE: SqlField[Int, VENUES] = SqlField(this, "room_size", "INT", JdbcType.Integer, nullable = true, 9)
  val MEETUPGROUP: SqlField[MeetupGroup.Slug, VENUES] = SqlField(this, "meetupGroup", "VARCHAR(80)", JdbcType.VarChar, nullable = true, 10)
  val MEETUPVENUE: SqlField[MeetupVenue.Id, VENUES] = SqlField(this, "meetupVenue", "BIGINT", JdbcType.BigInt, nullable = true, 11)
  val CREATED_AT: SqlField[Instant, VENUES] = SqlField(this, "created_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 12)
  val CREATED_BY: SqlFieldRef[User.Id, VENUES, USERS] = SqlField(this, "created_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 13, USERS.table.ID)
  val UPDATED_AT: SqlField[Instant, VENUES] = SqlField(this, "updated_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 14)
  val UPDATED_BY: SqlFieldRef[User.Id, VENUES, USERS] = SqlField(this, "updated_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 15, USERS.table.ID)

  override def getFields: List[SqlField[_, VENUES]] = List(ID, PARTNER_ID, CONTACT_ID, ADDRESS, ADDRESS_ID, ADDRESS_LAT, ADDRESS_LNG, ADDRESS_LOCALITY, ADDRESS_COUNTRY, NOTES, ROOM_SIZE, MEETUPGROUP, MEETUPVENUE, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("created", "created", NonEmptyList.of(CREATED_AT.asc)))

  override def searchOn: List[SqlField[_, VENUES]] = List(ID, ADDRESS, NOTES)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): VENUES = new VENUES(Some(alias))
}

private[database] object VENUES {
  val table = new VENUES() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
