package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class SPONSOR_PACKS private(getAlias: Option[String] = Some("sp")) extends Table.SqlTable("PUBLIC", "sponsor_packs", getAlias) {
  type Self = SPONSOR_PACKS

  val ID: SqlField[SponsorPack.Id, SPONSOR_PACKS] = SqlField(this, "id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 1)
  val GROUP_ID: SqlFieldRef[Group.Id, SPONSOR_PACKS, GROUPS] = SqlField(this, "group_id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 2, GROUPS.table.ID)
  val SLUG: SqlField[SponsorPack.Slug, SPONSOR_PACKS] = SqlField(this, "slug", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 3)
  val NAME: SqlField[SponsorPack.Name, SPONSOR_PACKS] = SqlField(this, "name", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 4)
  val DESCRIPTION: SqlField[Markdown, SPONSOR_PACKS] = SqlField(this, "description", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 5)
  val PRICE: SqlField[Double, SPONSOR_PACKS] = SqlField(this, "price", "DOUBLE PRECISION NOT NULL", JdbcType.Double, nullable = false, 6)
  val CURRENCY: SqlField[Price.Currency, SPONSOR_PACKS] = SqlField(this, "currency", "VARCHAR(10) NOT NULL", JdbcType.VarChar, nullable = false, 7)
  val DURATION: SqlField[TimePeriod, SPONSOR_PACKS] = SqlField(this, "duration", "VARCHAR(20) NOT NULL", JdbcType.VarChar, nullable = false, 8)
  val ACTIVE: SqlField[Boolean, SPONSOR_PACKS] = SqlField(this, "active", "BOOLEAN NOT NULL", JdbcType.Boolean, nullable = false, 9)
  val CREATED_AT: SqlField[Instant, SPONSOR_PACKS] = SqlField(this, "created_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 10)
  val CREATED_BY: SqlFieldRef[User.Id, SPONSOR_PACKS, USERS] = SqlField(this, "created_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 11, USERS.table.ID)
  val UPDATED_AT: SqlField[Instant, SPONSOR_PACKS] = SqlField(this, "updated_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 12)
  val UPDATED_BY: SqlFieldRef[User.Id, SPONSOR_PACKS, USERS] = SqlField(this, "updated_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 13, USERS.table.ID)

  override def getFields: List[SqlField[_, SPONSOR_PACKS]] = List(ID, GROUP_ID, SLUG, NAME, DESCRIPTION, PRICE, CURRENCY, DURATION, ACTIVE, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("price", "price", NonEmptyList.of(ACTIVE.desc, PRICE.desc)))

  override def searchOn: List[SqlField[_, SPONSOR_PACKS]] = List(ID, SLUG, NAME, DESCRIPTION)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): SPONSOR_PACKS = new SPONSOR_PACKS(Some(alias))
}

private[database] object SPONSOR_PACKS {
  val table = new SPONSOR_PACKS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
