package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class SPONSOR_PACKS private(getAlias: Option[String] = Some("sp")) extends Table.SqlTable("PUBLIC", "sponsor_packs", getAlias) {
  type Self = SPONSOR_PACKS

  val ID: SqlField[SponsorPack.Id, SPONSOR_PACKS] = new SqlField[SponsorPack.Id, SPONSOR_PACKS](this, "id") // CHAR(36) NOT NULL
  val GROUP_ID: SqlFieldRef[Group.Id, SPONSOR_PACKS, GROUPS] = new SqlFieldRef[Group.Id, SPONSOR_PACKS, GROUPS](this, "group_id", GROUPS.table.ID) // CHAR(36) NOT NULL
  val SLUG: SqlField[SponsorPack.Slug, SPONSOR_PACKS] = new SqlField[SponsorPack.Slug, SPONSOR_PACKS](this, "slug") // VARCHAR(120) NOT NULL
  val NAME: SqlField[SponsorPack.Name, SPONSOR_PACKS] = new SqlField[SponsorPack.Name, SPONSOR_PACKS](this, "name") // VARCHAR(120) NOT NULL
  val DESCRIPTION: SqlField[Markdown, SPONSOR_PACKS] = new SqlField[Markdown, SPONSOR_PACKS](this, "description") // VARCHAR(4096) NOT NULL
  val PRICE: SqlField[Double, SPONSOR_PACKS] = new SqlField[Double, SPONSOR_PACKS](this, "price") // DOUBLE PRECISION NOT NULL
  val CURRENCY: SqlField[Price.Currency, SPONSOR_PACKS] = new SqlField[Price.Currency, SPONSOR_PACKS](this, "currency") // VARCHAR(10) NOT NULL
  val DURATION: SqlField[TimePeriod, SPONSOR_PACKS] = new SqlField[TimePeriod, SPONSOR_PACKS](this, "duration") // VARCHAR(20) NOT NULL
  val ACTIVE: SqlField[Boolean, SPONSOR_PACKS] = new SqlField[Boolean, SPONSOR_PACKS](this, "active") // BOOLEAN NOT NULL
  val CREATED_AT: SqlField[Instant, SPONSOR_PACKS] = new SqlField[Instant, SPONSOR_PACKS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, SPONSOR_PACKS, USERS] = new SqlFieldRef[User.Id, SPONSOR_PACKS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, SPONSOR_PACKS] = new SqlField[Instant, SPONSOR_PACKS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, SPONSOR_PACKS, USERS] = new SqlFieldRef[User.Id, SPONSOR_PACKS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, SPONSOR_PACKS]] = List(ID, GROUP_ID, SLUG, NAME, DESCRIPTION, PRICE, CURRENCY, DURATION, ACTIVE, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("price", "price", NonEmptyList.of(ACTIVE.desc, PRICE.desc)))

  override def searchOn: List[SqlField[_, SPONSOR_PACKS]] = List(ID, SLUG, NAME, DESCRIPTION)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): SPONSOR_PACKS = new SPONSOR_PACKS(Some(alias))
}

private[database] object SPONSOR_PACKS {
  val table = new SPONSOR_PACKS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
