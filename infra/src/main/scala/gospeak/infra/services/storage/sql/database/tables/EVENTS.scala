package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class EVENTS private(getAlias: Option[String] = Some("e")) extends Table.SqlTable("PUBLIC", "events", getAlias) {
  type Self = EVENTS

  val ID: SqlFieldRaw[Event.Id, EVENTS] = SqlField(this, "id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 1)
  val GROUP_ID: SqlFieldRef[Group.Id, EVENTS, GROUPS] = SqlField(this, "group_id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 2, GROUPS.table.ID)
  val CFP_ID: SqlFieldRef[Cfp.Id, EVENTS, CFPS] = SqlField(this, "cfp_id", "CHAR(36)", JdbcType.Char, nullable = true, 3, CFPS.table.ID)
  val SLUG: SqlFieldRaw[Event.Slug, EVENTS] = SqlField(this, "slug", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 4)
  val NAME: SqlFieldRaw[Event.Name, EVENTS] = SqlField(this, "name", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 5)
  val KIND: SqlFieldRaw[Event.Kind, EVENTS] = SqlField(this, "kind", "VARCHAR(12) DEFAULT 'Meetup' NOT NULL", JdbcType.VarChar, nullable = false, 23)
  val START: SqlFieldRaw[LocalDateTime, EVENTS] = SqlField(this, "start", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 6)
  val MAX_ATTENDEE: SqlFieldRaw[Int, EVENTS] = SqlField(this, "max_attendee", "INT", JdbcType.Integer, nullable = true, 7)
  val ALLOW_RSVP: SqlFieldRaw[Boolean, EVENTS] = SqlField(this, "allow_rsvp", "BOOLEAN NOT NULL", JdbcType.Boolean, nullable = false, 8)
  val DESCRIPTION: SqlFieldRaw[LiquidMarkdown[Message.EventInfo], EVENTS] = SqlField(this, "description", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 9)
  val ORGA_NOTES: SqlFieldRaw[String, EVENTS] = SqlField(this, "orga_notes", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 10)
  val ORGA_NOTES_UPDATED_AT: SqlFieldRaw[Instant, EVENTS] = SqlField(this, "orga_notes_updated_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 11)
  val ORGA_NOTES_UPDATED_BY: SqlFieldRef[User.Id, EVENTS, USERS] = SqlField(this, "orga_notes_updated_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 12, USERS.table.ID)
  val VENUE: SqlFieldRef[Venue.Id, EVENTS, VENUES] = SqlField(this, "venue", "CHAR(36)", JdbcType.Char, nullable = true, 13, VENUES.table.ID)
  val TALKS: SqlFieldRaw[List[Proposal.Id], EVENTS] = SqlField(this, "talks", "VARCHAR(258) NOT NULL", JdbcType.VarChar, nullable = false, 14)
  val TAGS: SqlFieldRaw[List[Tag], EVENTS] = SqlField(this, "tags", "VARCHAR(150) NOT NULL", JdbcType.VarChar, nullable = false, 15)
  val PUBLISHED: SqlFieldRaw[Instant, EVENTS] = SqlField(this, "published", "TIMESTAMP", JdbcType.Timestamp, nullable = true, 16)
  val MEETUPGROUP: SqlFieldRaw[MeetupGroup.Slug, EVENTS] = SqlField(this, "meetupGroup", "VARCHAR(80)", JdbcType.VarChar, nullable = true, 17)
  val MEETUPEVENT: SqlFieldRaw[MeetupEvent.Id, EVENTS] = SqlField(this, "meetupEvent", "BIGINT", JdbcType.BigInt, nullable = true, 18)
  val CREATED_AT: SqlFieldRaw[Instant, EVENTS] = SqlField(this, "created_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 19)
  val CREATED_BY: SqlFieldRef[User.Id, EVENTS, USERS] = SqlField(this, "created_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 20, USERS.table.ID)
  val UPDATED_AT: SqlFieldRaw[Instant, EVENTS] = SqlField(this, "updated_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 21)
  val UPDATED_BY: SqlFieldRef[User.Id, EVENTS, USERS] = SqlField(this, "updated_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 22, USERS.table.ID)

  override def getFields: List[SqlField[_, EVENTS]] = List(ID, GROUP_ID, CFP_ID, SLUG, NAME, KIND, START, MAX_ATTENDEE, ALLOW_RSVP, DESCRIPTION, ORGA_NOTES, ORGA_NOTES_UPDATED_AT, ORGA_NOTES_UPDATED_BY, VENUE, TALKS, TAGS, PUBLISHED, MEETUPGROUP, MEETUPEVENT, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("start", "start", NonEmptyList.of(START.desc)))

  override def searchOn: List[SqlField[_, EVENTS]] = List(ID, SLUG, NAME, DESCRIPTION, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): EVENTS = new EVENTS(Some(alias))
}

private[database] object EVENTS {
  val table = new EVENTS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
