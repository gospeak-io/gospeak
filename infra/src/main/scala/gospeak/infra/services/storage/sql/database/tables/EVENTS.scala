package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class EVENTS private(getAlias: Option[String] = Some("e")) extends Table.SqlTable("PUBLIC", "events", getAlias) {
  type Self = EVENTS

  val ID: SqlField[Event.Id, EVENTS] = new SqlField[Event.Id, EVENTS](this, "id") // CHAR(36) NOT NULL
  val GROUP_ID: SqlFieldRef[Group.Id, EVENTS, GROUPS] = new SqlFieldRef[Group.Id, EVENTS, GROUPS](this, "group_id", GROUPS.table.ID) // CHAR(36) NOT NULL
  val CFP_ID: SqlFieldRefOpt[Cfp.Id, EVENTS, CFPS] = new SqlFieldRefOpt[Cfp.Id, EVENTS, CFPS](this, "cfp_id", CFPS.table.ID) // CHAR(36)
  val SLUG: SqlField[Event.Slug, EVENTS] = new SqlField[Event.Slug, EVENTS](this, "slug") // VARCHAR(120) NOT NULL
  val NAME: SqlField[Event.Name, EVENTS] = new SqlField[Event.Name, EVENTS](this, "name") // VARCHAR(120) NOT NULL
  val KIND: SqlField[Event.Kind, EVENTS] = new SqlField[Event.Kind, EVENTS](this, "kind") // VARCHAR(12) DEFAULT 'Meetup' NOT NULL
  val START: SqlField[LocalDateTime, EVENTS] = new SqlField[LocalDateTime, EVENTS](this, "start") // TIMESTAMP NOT NULL
  val MAX_ATTENDEE: SqlFieldOpt[Int, EVENTS] = new SqlFieldOpt[Int, EVENTS](this, "max_attendee") // INT
  val ALLOW_RSVP: SqlField[Boolean, EVENTS] = new SqlField[Boolean, EVENTS](this, "allow_rsvp") // BOOLEAN NOT NULL
  val DESCRIPTION: SqlField[LiquidMarkdown[Message.EventInfo], EVENTS] = new SqlField[LiquidMarkdown[Message.EventInfo], EVENTS](this, "description") // VARCHAR(4096) NOT NULL
  val ORGA_NOTES: SqlField[String, EVENTS] = new SqlField[String, EVENTS](this, "orga_notes") // VARCHAR(4096) NOT NULL
  val ORGA_NOTES_UPDATED_AT: SqlField[Instant, EVENTS] = new SqlField[Instant, EVENTS](this, "orga_notes_updated_at") // TIMESTAMP NOT NULL
  val ORGA_NOTES_UPDATED_BY: SqlFieldRef[User.Id, EVENTS, USERS] = new SqlFieldRef[User.Id, EVENTS, USERS](this, "orga_notes_updated_by", USERS.table.ID) // CHAR(36) NOT NULL
  val VENUE: SqlFieldRefOpt[Venue.Id, EVENTS, VENUES] = new SqlFieldRefOpt[Venue.Id, EVENTS, VENUES](this, "venue", VENUES.table.ID) // CHAR(36)
  val TALKS: SqlField[List[Proposal.Id], EVENTS] = new SqlField[List[Proposal.Id], EVENTS](this, "talks") // VARCHAR(258) NOT NULL
  val TAGS: SqlField[List[Tag], EVENTS] = new SqlField[List[Tag], EVENTS](this, "tags") // VARCHAR(150) NOT NULL
  val PUBLISHED: SqlFieldOpt[Instant, EVENTS] = new SqlFieldOpt[Instant, EVENTS](this, "published") // TIMESTAMP
  val MEETUPGROUP: SqlFieldOpt[MeetupGroup.Slug, EVENTS] = new SqlFieldOpt[MeetupGroup.Slug, EVENTS](this, "meetupGroup") // VARCHAR(80)
  val MEETUPEVENT: SqlFieldOpt[MeetupEvent.Id, EVENTS] = new SqlFieldOpt[MeetupEvent.Id, EVENTS](this, "meetupEvent") // BIGINT
  val CREATED_AT: SqlField[Instant, EVENTS] = new SqlField[Instant, EVENTS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, EVENTS, USERS] = new SqlFieldRef[User.Id, EVENTS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, EVENTS] = new SqlField[Instant, EVENTS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, EVENTS, USERS] = new SqlFieldRef[User.Id, EVENTS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, EVENTS]] = List(ID, GROUP_ID, CFP_ID, SLUG, NAME, KIND, START, MAX_ATTENDEE, ALLOW_RSVP, DESCRIPTION, ORGA_NOTES, ORGA_NOTES_UPDATED_AT, ORGA_NOTES_UPDATED_BY, VENUE, TALKS, TAGS, PUBLISHED, MEETUPGROUP, MEETUPEVENT, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("start", "start", NonEmptyList.of(START.desc)))

  override def searchOn: List[SqlField[_, EVENTS]] = List(ID, SLUG, NAME, DESCRIPTION, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): EVENTS = new EVENTS(Some(alias))
}

private[database] object EVENTS {
  val table = new EVENTS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
