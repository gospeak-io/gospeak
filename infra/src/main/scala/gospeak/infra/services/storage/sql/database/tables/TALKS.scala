package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class TALKS private(getAlias: Option[String] = Some("t")) extends Table.SqlTable("PUBLIC", "talks", getAlias) {
  type Self = TALKS

  val ID: SqlField[Talk.Id, TALKS] = new SqlField[Talk.Id, TALKS](this, "id") // CHAR(36) NOT NULL
  val SLUG: SqlField[Talk.Slug, TALKS] = new SqlField[Talk.Slug, TALKS](this, "slug") // VARCHAR(120) NOT NULL
  val STATUS: SqlField[Talk.Status, TALKS] = new SqlField[Talk.Status, TALKS](this, "status") // VARCHAR(10) NOT NULL
  val TITLE: SqlField[Talk.Title, TALKS] = new SqlField[Talk.Title, TALKS](this, "title") // VARCHAR(120) NOT NULL
  val DURATION: SqlField[FiniteDuration, TALKS] = new SqlField[FiniteDuration, TALKS](this, "duration") // BIGINT NOT NULL
  val DESCRIPTION: SqlField[Markdown, TALKS] = new SqlField[Markdown, TALKS](this, "description") // VARCHAR(4096) NOT NULL
  val MESSAGE: SqlField[Markdown, TALKS] = new SqlField[Markdown, TALKS](this, "message") // VARCHAR(4096) DEFAULT '' NOT NULL
  val SPEAKERS: SqlField[NonEmptyList[User.Id], TALKS] = new SqlField[NonEmptyList[User.Id], TALKS](this, "speakers") // VARCHAR(184) NOT NULL
  val SLIDES: SqlFieldOpt[Url.Slides, TALKS] = new SqlFieldOpt[Url.Slides, TALKS](this, "slides") // VARCHAR(1024)
  val VIDEO: SqlFieldOpt[Url.Video, TALKS] = new SqlFieldOpt[Url.Video, TALKS](this, "video") // VARCHAR(1024)
  val TAGS: SqlField[List[Tag], TALKS] = new SqlField[List[Tag], TALKS](this, "tags") // VARCHAR(150) NOT NULL
  val CREATED_AT: SqlField[Instant, TALKS] = new SqlField[Instant, TALKS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, TALKS, USERS] = new SqlFieldRef[User.Id, TALKS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, TALKS] = new SqlField[Instant, TALKS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, TALKS, USERS] = new SqlFieldRef[User.Id, TALKS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, TALKS]] = List(ID, SLUG, STATUS, TITLE, DURATION, DESCRIPTION, MESSAGE, SPEAKERS, SLIDES, VIDEO, TAGS, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("title", "title", NonEmptyList.of(Field.Order(STATUS, asc = true, Some("? = 'Archived'")), TITLE.asc)))

  override def searchOn: List[SqlField[_, TALKS]] = List(ID, SLUG, STATUS, TITLE, DESCRIPTION, MESSAGE, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): TALKS = new TALKS(Some(alias))
}

private[database] object TALKS {
  val table = new TALKS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
