package gospeak.infra.services.storage.sql.database.tables

import java.time.LocalDateTime

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class VIDEO_SOURCES private(getAlias: Option[String] = Some("vis")) extends Table.SqlTable("PUBLIC", "video_sources", getAlias) {
  type Self = VIDEO_SOURCES

  val VIDEO_ID: SqlFieldRef[Url.Video.Id, VIDEO_SOURCES, VIDEOS] = SqlField(this, "video_id", "VARCHAR(15) NOT NULL", JdbcType.VarChar, nullable = false, 1, VIDEOS.table.ID)
  val TALK_ID: SqlFieldRef[Talk.Id, VIDEO_SOURCES, TALKS] = SqlField(this, "talk_id", "CHAR(36)", JdbcType.Char, nullable = true, 2, TALKS.table.ID)
  val PROPOSAL_ID: SqlFieldRef[Proposal.Id, VIDEO_SOURCES, PROPOSALS] = SqlField(this, "proposal_id", "CHAR(36)", JdbcType.Char, nullable = true, 3, PROPOSALS.table.ID)
  val EXTERNAL_PROPOSAL_ID: SqlFieldRef[ExternalProposal.Id, VIDEO_SOURCES, EXTERNAL_PROPOSALS] = SqlField(this, "external_proposal_id", "CHAR(36)", JdbcType.Char, nullable = true, 4, EXTERNAL_PROPOSALS.table.ID)
  val EXTERNAL_EVENT_ID: SqlFieldRef[ExternalEvent.Id, VIDEO_SOURCES, EXTERNAL_EVENTS] = SqlField(this, "external_event_id", "CHAR(36)", JdbcType.Char, nullable = true, 5, EXTERNAL_EVENTS.table.ID)

  override def getFields: List[SqlField[_, VIDEO_SOURCES]] = List(VIDEO_ID, TALK_ID, PROPOSAL_ID, EXTERNAL_PROPOSAL_ID, EXTERNAL_EVENT_ID)

  override def getSorts: List[Sort] = List(Sort("video", "video", NonEmptyList.of(VIDEO_ID.asc)))

  override def searchOn: List[SqlField[_, VIDEO_SOURCES]] = List(VIDEO_ID)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): VIDEO_SOURCES = new VIDEO_SOURCES(Some(alias))
}

private[database] object VIDEO_SOURCES {
  val table = new VIDEO_SOURCES() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
