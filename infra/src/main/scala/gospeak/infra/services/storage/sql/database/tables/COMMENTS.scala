package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class COMMENTS private(getAlias: Option[String] = Some("co")) extends Table.SqlTable("PUBLIC", "comments", getAlias) {
  type Self = COMMENTS

  val EVENT_ID: SqlFieldRef[Event.Id, COMMENTS, EVENTS] = SqlField(this, "event_id", "CHAR(36)", JdbcType.Char, nullable = true, 1, EVENTS.table.ID)
  val PROPOSAL_ID: SqlFieldRef[Proposal.Id, COMMENTS, PROPOSALS] = SqlField(this, "proposal_id", "CHAR(36)", JdbcType.Char, nullable = true, 2, PROPOSALS.table.ID)
  val ID: SqlField[Comment.Id, COMMENTS] = SqlField(this, "id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 3)
  val KIND: SqlField[Comment.Kind, COMMENTS] = SqlField(this, "kind", "VARCHAR(15) NOT NULL", JdbcType.VarChar, nullable = false, 4)
  val ANSWERS: SqlFieldRef[Comment.Id, COMMENTS, COMMENTS] = SqlField(this, "answers", "CHAR(36)", JdbcType.Char, nullable = true, 5, ID)
  val TEXT: SqlField[String, COMMENTS] = SqlField(this, "text", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 6)
  val CREATED_AT: SqlField[Instant, COMMENTS] = SqlField(this, "created_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 7)
  val CREATED_BY: SqlFieldRef[User.Id, COMMENTS, USERS] = SqlField(this, "created_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 8, USERS.table.ID)

  override def getFields: List[SqlField[_, COMMENTS]] = List(EVENT_ID, PROPOSAL_ID, ID, KIND, ANSWERS, TEXT, CREATED_AT, CREATED_BY)

  override def getSorts: List[Sort] = List(Sort("created", "created", NonEmptyList.of(CREATED_AT.asc)))

  override def searchOn: List[SqlField[_, COMMENTS]] = List(ID, KIND, ANSWERS, TEXT, CREATED_BY)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): COMMENTS = new COMMENTS(Some(alias))
}

private[database] object COMMENTS {
  val table = new COMMENTS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
