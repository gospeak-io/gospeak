package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class COMMENTS private(getAlias: Option[String] = Some("co")) extends Table.SqlTable("PUBLIC", "comments", getAlias) {
  type Self = COMMENTS

  val EVENT_ID: SqlFieldRefOpt[Event.Id, COMMENTS, EVENTS] = new SqlFieldRefOpt[Event.Id, COMMENTS, EVENTS](this, "event_id", EVENTS.table.ID) // CHAR(36)
  val PROPOSAL_ID: SqlFieldRefOpt[Proposal.Id, COMMENTS, PROPOSALS] = new SqlFieldRefOpt[Proposal.Id, COMMENTS, PROPOSALS](this, "proposal_id", PROPOSALS.table.ID) // CHAR(36)
  val ID: SqlField[Comment.Id, COMMENTS] = new SqlField[Comment.Id, COMMENTS](this, "id") // CHAR(36) NOT NULL
  val KIND: SqlField[Comment.Kind, COMMENTS] = new SqlField[Comment.Kind, COMMENTS](this, "kind") // VARCHAR(15) NOT NULL
  val ANSWERS: SqlFieldRefOpt[Comment.Id, COMMENTS, COMMENTS] = new SqlFieldRefOpt[Comment.Id, COMMENTS, COMMENTS](this, "answers", ID) // CHAR(36)
  val TEXT: SqlField[String, COMMENTS] = new SqlField[String, COMMENTS](this, "text") // VARCHAR(4096) NOT NULL
  val CREATED_AT: SqlField[Instant, COMMENTS] = new SqlField[Instant, COMMENTS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, COMMENTS, USERS] = new SqlFieldRef[User.Id, COMMENTS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, COMMENTS]] = List(EVENT_ID, PROPOSAL_ID, ID, KIND, ANSWERS, TEXT, CREATED_AT, CREATED_BY)

  override def getSorts: List[Sort] = List(Sort("created", "created", NonEmptyList.of(CREATED_AT.asc)))

  override def searchOn: List[SqlField[_, COMMENTS]] = List(ID, KIND, ANSWERS, TEXT, CREATED_BY)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): COMMENTS = new COMMENTS(Some(alias))
}

private[database] object COMMENTS {
  val table = new COMMENTS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
