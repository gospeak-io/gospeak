package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class GROUPS private(getAlias: Option[String] = Some("g")) extends Table.SqlTable("PUBLIC", "groups", getAlias) {
  type Self = GROUPS

  val ID: SqlFieldRaw[Group.Id, GROUPS] = SqlField(this, "id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 1)
  val SLUG: SqlFieldRaw[Group.Slug, GROUPS] = SqlField(this, "slug", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 2)
  val NAME: SqlFieldRaw[Group.Name, GROUPS] = SqlField(this, "name", "VARCHAR(120) NOT NULL", JdbcType.VarChar, nullable = false, 3)
  val LOGO: SqlFieldRaw[Logo, GROUPS] = SqlField(this, "logo", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 4)
  val BANNER: SqlFieldRaw[Banner, GROUPS] = SqlField(this, "banner", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 5)
  val CONTACT: SqlFieldRaw[EmailAddress, GROUPS] = SqlField(this, "contact", "VARCHAR(120)", JdbcType.VarChar, nullable = true, 6)
  val WEBSITE: SqlFieldRaw[Url, GROUPS] = SqlField(this, "website", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 7)
  val DESCRIPTION: SqlFieldRaw[Markdown, GROUPS] = SqlField(this, "description", "VARCHAR(4096) NOT NULL", JdbcType.VarChar, nullable = false, 8)
  val LOCATION: SqlFieldRaw[GMapPlace, GROUPS] = SqlField(this, "location", "VARCHAR(4096)", JdbcType.VarChar, nullable = true, 9)
  val LOCATION_ID: SqlFieldRaw[String, GROUPS] = SqlField(this, "location_id", "VARCHAR(150)", JdbcType.VarChar, nullable = true, 31)
  val LOCATION_LAT: SqlFieldRaw[Double, GROUPS] = SqlField(this, "location_lat", "DOUBLE PRECISION", JdbcType.Double, nullable = true, 10)
  val LOCATION_LNG: SqlFieldRaw[Double, GROUPS] = SqlField(this, "location_lng", "DOUBLE PRECISION", JdbcType.Double, nullable = true, 11)
  val LOCATION_LOCALITY: SqlFieldRaw[String, GROUPS] = SqlField(this, "location_locality", "VARCHAR(50)", JdbcType.VarChar, nullable = true, 12)
  val LOCATION_COUNTRY: SqlFieldRaw[String, GROUPS] = SqlField(this, "location_country", "VARCHAR(30)", JdbcType.VarChar, nullable = true, 13)
  val OWNERS: SqlFieldRaw[NonEmptyList[User.Id], GROUPS] = SqlField(this, "owners", "VARCHAR(369) NOT NULL", JdbcType.VarChar, nullable = false, 14)
  val SOCIAL_FACEBOOK: SqlFieldRaw[FacebookAccount, GROUPS] = SqlField(this, "social_facebook", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 15)
  val SOCIAL_INSTAGRAM: SqlFieldRaw[InstagramAccount, GROUPS] = SqlField(this, "social_instagram", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 16)
  val SOCIAL_TWITTER: SqlFieldRaw[TwitterAccount, GROUPS] = SqlField(this, "social_twitter", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 17)
  val SOCIAL_LINKEDIN: SqlFieldRaw[LinkedInAccount, GROUPS] = SqlField(this, "social_linkedIn", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 18)
  val SOCIAL_YOUTUBE: SqlFieldRaw[YoutubeAccount, GROUPS] = SqlField(this, "social_youtube", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 19)
  val SOCIAL_MEETUP: SqlFieldRaw[MeetupAccount, GROUPS] = SqlField(this, "social_meetup", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 20)
  val SOCIAL_EVENTBRITE: SqlFieldRaw[EventbriteAccount, GROUPS] = SqlField(this, "social_eventbrite", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 21)
  val SOCIAL_SLACK: SqlFieldRaw[SlackAccount, GROUPS] = SqlField(this, "social_slack", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 22)
  val SOCIAL_DISCORD: SqlFieldRaw[DiscordAccount, GROUPS] = SqlField(this, "social_discord", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 23)
  val SOCIAL_GITHUB: SqlFieldRaw[GithubAccount, GROUPS] = SqlField(this, "social_github", "VARCHAR(1024)", JdbcType.VarChar, nullable = true, 24)
  val TAGS: SqlFieldRaw[List[Tag], GROUPS] = SqlField(this, "tags", "VARCHAR(150) NOT NULL", JdbcType.VarChar, nullable = false, 25)
  val STATUS: SqlFieldRaw[Group.Status, GROUPS] = SqlField(this, "status", "VARCHAR(10) NOT NULL", JdbcType.VarChar, nullable = false, 26)
  val CREATED_AT: SqlFieldRaw[Instant, GROUPS] = SqlField(this, "created_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 27)
  val CREATED_BY: SqlFieldRef[User.Id, GROUPS, USERS] = SqlField(this, "created_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 28, USERS.table.ID)
  val UPDATED_AT: SqlFieldRaw[Instant, GROUPS] = SqlField(this, "updated_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 29)
  val UPDATED_BY: SqlFieldRef[User.Id, GROUPS, USERS] = SqlField(this, "updated_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 30, USERS.table.ID)

  override def getFields: List[SqlField[_, GROUPS]] = List(ID, SLUG, NAME, LOGO, BANNER, CONTACT, WEBSITE, DESCRIPTION, LOCATION, LOCATION_ID, LOCATION_LAT, LOCATION_LNG, LOCATION_LOCALITY, LOCATION_COUNTRY, OWNERS, SOCIAL_FACEBOOK, SOCIAL_INSTAGRAM, SOCIAL_TWITTER, SOCIAL_LINKEDIN, SOCIAL_YOUTUBE, SOCIAL_MEETUP, SOCIAL_EVENTBRITE, SOCIAL_SLACK, SOCIAL_DISCORD, SOCIAL_GITHUB, TAGS, STATUS, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("name", "name", NonEmptyList.of(NAME.asc)))

  override def searchOn: List[SqlField[_, GROUPS]] = List(ID, SLUG, NAME, CONTACT, DESCRIPTION, LOCATION_LOCALITY, LOCATION_COUNTRY, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): GROUPS = new GROUPS(Some(alias))
}

private[database] object GROUPS {
  val table = new GROUPS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
