package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class GROUPS private(getAlias: Option[String] = Some("g")) extends Table.SqlTable("PUBLIC", "groups", getAlias) {
  type Self = GROUPS

  val ID: SqlField[Group.Id, GROUPS] = new SqlField[Group.Id, GROUPS](this, "id") // CHAR(36) NOT NULL
  val SLUG: SqlField[Group.Slug, GROUPS] = new SqlField[Group.Slug, GROUPS](this, "slug") // VARCHAR(120) NOT NULL
  val NAME: SqlField[Group.Name, GROUPS] = new SqlField[Group.Name, GROUPS](this, "name") // VARCHAR(120) NOT NULL
  val LOGO: SqlFieldOpt[Logo, GROUPS] = new SqlFieldOpt[Logo, GROUPS](this, "logo") // VARCHAR(1024)
  val BANNER: SqlFieldOpt[Banner, GROUPS] = new SqlFieldOpt[Banner, GROUPS](this, "banner") // VARCHAR(1024)
  val CONTACT: SqlFieldOpt[EmailAddress, GROUPS] = new SqlFieldOpt[EmailAddress, GROUPS](this, "contact") // VARCHAR(120)
  val WEBSITE: SqlFieldOpt[Url, GROUPS] = new SqlFieldOpt[Url, GROUPS](this, "website") // VARCHAR(1024)
  val DESCRIPTION: SqlField[Markdown, GROUPS] = new SqlField[Markdown, GROUPS](this, "description") // VARCHAR(4096) NOT NULL
  val LOCATION: SqlFieldOpt[GMapPlace, GROUPS] = new SqlFieldOpt[GMapPlace, GROUPS](this, "location") // VARCHAR(4096)
  val LOCATION_ID: SqlFieldOpt[String, GROUPS] = new SqlFieldOpt[String, GROUPS](this, "location_id") // VARCHAR(150)
  val LOCATION_LAT: SqlFieldOpt[Double, GROUPS] = new SqlFieldOpt[Double, GROUPS](this, "location_lat") // DOUBLE PRECISION
  val LOCATION_LNG: SqlFieldOpt[Double, GROUPS] = new SqlFieldOpt[Double, GROUPS](this, "location_lng") // DOUBLE PRECISION
  val LOCATION_LOCALITY: SqlFieldOpt[String, GROUPS] = new SqlFieldOpt[String, GROUPS](this, "location_locality") // VARCHAR(50)
  val LOCATION_COUNTRY: SqlFieldOpt[String, GROUPS] = new SqlFieldOpt[String, GROUPS](this, "location_country") // VARCHAR(30)
  val OWNERS: SqlField[NonEmptyList[User.Id], GROUPS] = new SqlField[NonEmptyList[User.Id], GROUPS](this, "owners") // VARCHAR(369) NOT NULL
  val SOCIAL_FACEBOOK: SqlFieldOpt[FacebookAccount, GROUPS] = new SqlFieldOpt[FacebookAccount, GROUPS](this, "social_facebook") // VARCHAR(1024)
  val SOCIAL_INSTAGRAM: SqlFieldOpt[InstagramAccount, GROUPS] = new SqlFieldOpt[InstagramAccount, GROUPS](this, "social_instagram") // VARCHAR(1024)
  val SOCIAL_TWITTER: SqlFieldOpt[TwitterAccount, GROUPS] = new SqlFieldOpt[TwitterAccount, GROUPS](this, "social_twitter") // VARCHAR(1024)
  val SOCIAL_LINKEDIN: SqlFieldOpt[LinkedInAccount, GROUPS] = new SqlFieldOpt[LinkedInAccount, GROUPS](this, "social_linkedIn") // VARCHAR(1024)
  val SOCIAL_YOUTUBE: SqlFieldOpt[YoutubeAccount, GROUPS] = new SqlFieldOpt[YoutubeAccount, GROUPS](this, "social_youtube") // VARCHAR(1024)
  val SOCIAL_MEETUP: SqlFieldOpt[MeetupAccount, GROUPS] = new SqlFieldOpt[MeetupAccount, GROUPS](this, "social_meetup") // VARCHAR(1024)
  val SOCIAL_EVENTBRITE: SqlFieldOpt[EventbriteAccount, GROUPS] = new SqlFieldOpt[EventbriteAccount, GROUPS](this, "social_eventbrite") // VARCHAR(1024)
  val SOCIAL_SLACK: SqlFieldOpt[SlackAccount, GROUPS] = new SqlFieldOpt[SlackAccount, GROUPS](this, "social_slack") // VARCHAR(1024)
  val SOCIAL_DISCORD: SqlFieldOpt[DiscordAccount, GROUPS] = new SqlFieldOpt[DiscordAccount, GROUPS](this, "social_discord") // VARCHAR(1024)
  val SOCIAL_GITHUB: SqlFieldOpt[GithubAccount, GROUPS] = new SqlFieldOpt[GithubAccount, GROUPS](this, "social_github") // VARCHAR(1024)
  val TAGS: SqlField[List[Tag], GROUPS] = new SqlField[List[Tag], GROUPS](this, "tags") // VARCHAR(150) NOT NULL
  val STATUS: SqlField[Group.Status, GROUPS] = new SqlField[Group.Status, GROUPS](this, "status") // VARCHAR(10) NOT NULL
  val CREATED_AT: SqlField[Instant, GROUPS] = new SqlField[Instant, GROUPS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, GROUPS, USERS] = new SqlFieldRef[User.Id, GROUPS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, GROUPS] = new SqlField[Instant, GROUPS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, GROUPS, USERS] = new SqlFieldRef[User.Id, GROUPS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, GROUPS]] = List(ID, SLUG, NAME, LOGO, BANNER, CONTACT, WEBSITE, DESCRIPTION, LOCATION, LOCATION_ID, LOCATION_LAT, LOCATION_LNG, LOCATION_LOCALITY, LOCATION_COUNTRY, OWNERS, SOCIAL_FACEBOOK, SOCIAL_INSTAGRAM, SOCIAL_TWITTER, SOCIAL_LINKEDIN, SOCIAL_YOUTUBE, SOCIAL_MEETUP, SOCIAL_EVENTBRITE, SOCIAL_SLACK, SOCIAL_DISCORD, SOCIAL_GITHUB, TAGS, STATUS, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("name", "name", NonEmptyList.of(NAME.asc)))

  override def searchOn: List[SqlField[_, GROUPS]] = List(ID, SLUG, NAME, CONTACT, DESCRIPTION, LOCATION_LOCALITY, LOCATION_COUNTRY, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): GROUPS = new GROUPS(Some(alias))
}

private[database] object GROUPS {
  val table = new GROUPS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
