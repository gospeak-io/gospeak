package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class PARTNERS private(getAlias: Option[String] = Some("pa")) extends Table.SqlTable("PUBLIC", "partners", getAlias) {
  type Self = PARTNERS

  val ID: SqlField[Partner.Id, PARTNERS] = new SqlField[Partner.Id, PARTNERS](this, "id") // CHAR(36) NOT NULL
  val GROUP_ID: SqlFieldRef[Group.Id, PARTNERS, GROUPS] = new SqlFieldRef[Group.Id, PARTNERS, GROUPS](this, "group_id", GROUPS.table.ID) // CHAR(36) NOT NULL
  val SLUG: SqlField[Partner.Slug, PARTNERS] = new SqlField[Partner.Slug, PARTNERS](this, "slug") // VARCHAR(120) NOT NULL
  val NAME: SqlField[Partner.Name, PARTNERS] = new SqlField[Partner.Name, PARTNERS](this, "name") // VARCHAR(120) NOT NULL
  val NOTES: SqlField[Markdown, PARTNERS] = new SqlField[Markdown, PARTNERS](this, "notes") // VARCHAR(4096) NOT NULL
  val DESCRIPTION: SqlFieldOpt[Markdown, PARTNERS] = new SqlFieldOpt[Markdown, PARTNERS](this, "description") // VARCHAR(4096)
  val LOGO: SqlField[Logo, PARTNERS] = new SqlField[Logo, PARTNERS](this, "logo") // VARCHAR(1024) NOT NULL
  val SOCIAL_FACEBOOK: SqlFieldOpt[FacebookAccount, PARTNERS] = new SqlFieldOpt[FacebookAccount, PARTNERS](this, "social_facebook") // VARCHAR(1024)
  val SOCIAL_INSTAGRAM: SqlFieldOpt[InstagramAccount, PARTNERS] = new SqlFieldOpt[InstagramAccount, PARTNERS](this, "social_instagram") // VARCHAR(1024)
  val SOCIAL_TWITTER: SqlFieldOpt[TwitterAccount, PARTNERS] = new SqlFieldOpt[TwitterAccount, PARTNERS](this, "social_twitter") // VARCHAR(1024)
  val SOCIAL_LINKEDIN: SqlFieldOpt[LinkedInAccount, PARTNERS] = new SqlFieldOpt[LinkedInAccount, PARTNERS](this, "social_linkedIn") // VARCHAR(1024)
  val SOCIAL_YOUTUBE: SqlFieldOpt[YoutubeAccount, PARTNERS] = new SqlFieldOpt[YoutubeAccount, PARTNERS](this, "social_youtube") // VARCHAR(1024)
  val SOCIAL_MEETUP: SqlFieldOpt[MeetupAccount, PARTNERS] = new SqlFieldOpt[MeetupAccount, PARTNERS](this, "social_meetup") // VARCHAR(1024)
  val SOCIAL_EVENTBRITE: SqlFieldOpt[EventbriteAccount, PARTNERS] = new SqlFieldOpt[EventbriteAccount, PARTNERS](this, "social_eventbrite") // VARCHAR(1024)
  val SOCIAL_SLACK: SqlFieldOpt[SlackAccount, PARTNERS] = new SqlFieldOpt[SlackAccount, PARTNERS](this, "social_slack") // VARCHAR(1024)
  val SOCIAL_DISCORD: SqlFieldOpt[DiscordAccount, PARTNERS] = new SqlFieldOpt[DiscordAccount, PARTNERS](this, "social_discord") // VARCHAR(1024)
  val SOCIAL_GITHUB: SqlFieldOpt[GithubAccount, PARTNERS] = new SqlFieldOpt[GithubAccount, PARTNERS](this, "social_github") // VARCHAR(1024)
  val CREATED_AT: SqlField[Instant, PARTNERS] = new SqlField[Instant, PARTNERS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, PARTNERS, USERS] = new SqlFieldRef[User.Id, PARTNERS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, PARTNERS] = new SqlField[Instant, PARTNERS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, PARTNERS, USERS] = new SqlFieldRef[User.Id, PARTNERS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, PARTNERS]] = List(ID, GROUP_ID, SLUG, NAME, NOTES, DESCRIPTION, LOGO, SOCIAL_FACEBOOK, SOCIAL_INSTAGRAM, SOCIAL_TWITTER, SOCIAL_LINKEDIN, SOCIAL_YOUTUBE, SOCIAL_MEETUP, SOCIAL_EVENTBRITE, SOCIAL_SLACK, SOCIAL_DISCORD, SOCIAL_GITHUB, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("name", "name", NonEmptyList.of(NAME.asc)))

  override def searchOn: List[SqlField[_, PARTNERS]] = List(ID, SLUG, NAME, NOTES, DESCRIPTION)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): PARTNERS = new PARTNERS(Some(alias))
}

private[database] object PARTNERS {
  val table = new PARTNERS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
