package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class EXTERNAL_PROPOSALS private(getAlias: Option[String] = Some("ep")) extends Table.SqlTable("PUBLIC", "external_proposals", getAlias) {
  type Self = EXTERNAL_PROPOSALS

  val ID: SqlField[ExternalProposal.Id, EXTERNAL_PROPOSALS] = new SqlField[ExternalProposal.Id, EXTERNAL_PROPOSALS](this, "id") // CHAR(36) NOT NULL
  val TALK_ID: SqlFieldRef[Talk.Id, EXTERNAL_PROPOSALS, TALKS] = new SqlFieldRef[Talk.Id, EXTERNAL_PROPOSALS, TALKS](this, "talk_id", TALKS.table.ID) // CHAR(36) NOT NULL
  val EVENT_ID: SqlFieldRef[ExternalEvent.Id, EXTERNAL_PROPOSALS, EXTERNAL_EVENTS] = new SqlFieldRef[ExternalEvent.Id, EXTERNAL_PROPOSALS, EXTERNAL_EVENTS](this, "event_id", EXTERNAL_EVENTS.table.ID) // CHAR(36) NOT NULL
  val STATUS: SqlField[Proposal.Status, EXTERNAL_PROPOSALS] = new SqlField[Proposal.Status, EXTERNAL_PROPOSALS](this, "status") // VARCHAR(10) NOT NULL
  val TITLE: SqlField[Talk.Title, EXTERNAL_PROPOSALS] = new SqlField[Talk.Title, EXTERNAL_PROPOSALS](this, "title") // VARCHAR(120) NOT NULL
  val DURATION: SqlField[FiniteDuration, EXTERNAL_PROPOSALS] = new SqlField[FiniteDuration, EXTERNAL_PROPOSALS](this, "duration") // BIGINT NOT NULL
  val DESCRIPTION: SqlField[Markdown, EXTERNAL_PROPOSALS] = new SqlField[Markdown, EXTERNAL_PROPOSALS](this, "description") // VARCHAR(4096) NOT NULL
  val MESSAGE: SqlField[Markdown, EXTERNAL_PROPOSALS] = new SqlField[Markdown, EXTERNAL_PROPOSALS](this, "message") // VARCHAR(4096) NOT NULL
  val SPEAKERS: SqlField[NonEmptyList[User.Id], EXTERNAL_PROPOSALS] = new SqlField[NonEmptyList[User.Id], EXTERNAL_PROPOSALS](this, "speakers") // VARCHAR(184) NOT NULL
  val SLIDES: SqlFieldOpt[Url.Slides, EXTERNAL_PROPOSALS] = new SqlFieldOpt[Url.Slides, EXTERNAL_PROPOSALS](this, "slides") // VARCHAR(1024)
  val VIDEO: SqlFieldOpt[Url.Video, EXTERNAL_PROPOSALS] = new SqlFieldOpt[Url.Video, EXTERNAL_PROPOSALS](this, "video") // VARCHAR(1024)
  val URL: SqlFieldOpt[Url, EXTERNAL_PROPOSALS] = new SqlFieldOpt[Url, EXTERNAL_PROPOSALS](this, "url") // VARCHAR(1024)
  val TAGS: SqlField[List[Tag], EXTERNAL_PROPOSALS] = new SqlField[List[Tag], EXTERNAL_PROPOSALS](this, "tags") // VARCHAR(150) NOT NULL
  val CREATED_AT: SqlField[Instant, EXTERNAL_PROPOSALS] = new SqlField[Instant, EXTERNAL_PROPOSALS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, EXTERNAL_PROPOSALS, USERS] = new SqlFieldRef[User.Id, EXTERNAL_PROPOSALS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, EXTERNAL_PROPOSALS] = new SqlField[Instant, EXTERNAL_PROPOSALS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, EXTERNAL_PROPOSALS, USERS] = new SqlFieldRef[User.Id, EXTERNAL_PROPOSALS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, EXTERNAL_PROPOSALS]] = List(ID, TALK_ID, EVENT_ID, STATUS, TITLE, DURATION, DESCRIPTION, MESSAGE, SPEAKERS, SLIDES, VIDEO, URL, TAGS, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("title", "title", NonEmptyList.of(TITLE.asc, CREATED_AT.asc)))

  override def searchOn: List[SqlField[_, EXTERNAL_PROPOSALS]] = List(ID, TITLE, STATUS, DESCRIPTION, MESSAGE, TAGS)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): EXTERNAL_PROPOSALS = new EXTERNAL_PROPOSALS(Some(alias))
}

private[database] object EXTERNAL_PROPOSALS {
  val table = new EXTERNAL_PROPOSALS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
