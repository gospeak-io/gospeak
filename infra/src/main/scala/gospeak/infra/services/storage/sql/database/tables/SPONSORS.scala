package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDate, LocalDateTime}

import cats.data.NonEmptyList
import fr.loicknuchel.safeql.Table._
import fr.loicknuchel.safeql._
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by fr.loicknuchel.safeql.gen.writer.ScalaWriter
 */
class SPONSORS private(getAlias: Option[String] = Some("s")) extends Table.SqlTable("PUBLIC", "sponsors", getAlias) {
  type Self = SPONSORS

  val ID: SqlFieldRaw[Sponsor.Id, SPONSORS] = SqlField(this, "id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 1)
  val GROUP_ID: SqlFieldRef[Group.Id, SPONSORS, GROUPS] = SqlField(this, "group_id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 2, GROUPS.table.ID)
  val PARTNER_ID: SqlFieldRef[Partner.Id, SPONSORS, PARTNERS] = SqlField(this, "partner_id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 3, PARTNERS.table.ID)
  val SPONSOR_PACK_ID: SqlFieldRef[SponsorPack.Id, SPONSORS, SPONSOR_PACKS] = SqlField(this, "sponsor_pack_id", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 4, SPONSOR_PACKS.table.ID)
  val CONTACT_ID: SqlFieldRef[Contact.Id, SPONSORS, CONTACTS] = SqlField(this, "contact_id", "CHAR(36)", JdbcType.Char, nullable = true, 5, CONTACTS.table.ID)
  val START: SqlFieldRaw[LocalDate, SPONSORS] = SqlField(this, "start", "DATE NOT NULL", JdbcType.Date, nullable = false, 6)
  val FINISH: SqlFieldRaw[LocalDate, SPONSORS] = SqlField(this, "finish", "DATE NOT NULL", JdbcType.Date, nullable = false, 7)
  val PAID: SqlFieldRaw[LocalDate, SPONSORS] = SqlField(this, "paid", "DATE", JdbcType.Date, nullable = true, 8)
  val PRICE: SqlFieldRaw[Double, SPONSORS] = SqlField(this, "price", "DOUBLE PRECISION NOT NULL", JdbcType.Double, nullable = false, 9)
  val CURRENCY: SqlFieldRaw[Price.Currency, SPONSORS] = SqlField(this, "currency", "VARCHAR(10) NOT NULL", JdbcType.VarChar, nullable = false, 10)
  val CREATED_AT: SqlFieldRaw[Instant, SPONSORS] = SqlField(this, "created_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 11)
  val CREATED_BY: SqlFieldRef[User.Id, SPONSORS, USERS] = SqlField(this, "created_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 12, USERS.table.ID)
  val UPDATED_AT: SqlFieldRaw[Instant, SPONSORS] = SqlField(this, "updated_at", "TIMESTAMP NOT NULL", JdbcType.Timestamp, nullable = false, 13)
  val UPDATED_BY: SqlFieldRef[User.Id, SPONSORS, USERS] = SqlField(this, "updated_by", "CHAR(36) NOT NULL", JdbcType.Char, nullable = false, 14, USERS.table.ID)

  override def getFields: List[SqlField[_, SPONSORS]] = List(ID, GROUP_ID, PARTNER_ID, SPONSOR_PACK_ID, CONTACT_ID, START, FINISH, PAID, PRICE, CURRENCY, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("start", "start date", NonEmptyList.of(START.desc)))

  override def searchOn: List[SqlField[_, SPONSORS]] = List(ID)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): SPONSORS = new SPONSORS(Some(alias))
}

private[database] object SPONSORS {
  val table = new SPONSORS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
