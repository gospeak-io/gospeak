package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDate, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class SPONSORS private(getAlias: Option[String] = Some("s")) extends Table.SqlTable("PUBLIC", "sponsors", getAlias) {
  type Self = SPONSORS

  val ID: SqlField[Sponsor.Id, SPONSORS] = new SqlField[Sponsor.Id, SPONSORS](this, "id") // CHAR(36) NOT NULL
  val GROUP_ID: SqlFieldRef[Group.Id, SPONSORS, GROUPS] = new SqlFieldRef[Group.Id, SPONSORS, GROUPS](this, "group_id", GROUPS.table.ID) // CHAR(36) NOT NULL
  val PARTNER_ID: SqlFieldRef[Partner.Id, SPONSORS, PARTNERS] = new SqlFieldRef[Partner.Id, SPONSORS, PARTNERS](this, "partner_id", PARTNERS.table.ID) // CHAR(36) NOT NULL
  val SPONSOR_PACK_ID: SqlFieldRef[SponsorPack.Id, SPONSORS, SPONSOR_PACKS] = new SqlFieldRef[SponsorPack.Id, SPONSORS, SPONSOR_PACKS](this, "sponsor_pack_id", SPONSOR_PACKS.table.ID) // CHAR(36) NOT NULL
  val CONTACT_ID: SqlFieldRefOpt[Contact.Id, SPONSORS, CONTACTS] = new SqlFieldRefOpt[Contact.Id, SPONSORS, CONTACTS](this, "contact_id", CONTACTS.table.ID) // CHAR(36)
  val START: SqlField[LocalDate, SPONSORS] = new SqlField[LocalDate, SPONSORS](this, "start") // DATE NOT NULL
  val FINISH: SqlField[LocalDate, SPONSORS] = new SqlField[LocalDate, SPONSORS](this, "finish") // DATE NOT NULL
  val PAID: SqlFieldOpt[LocalDate, SPONSORS] = new SqlFieldOpt[LocalDate, SPONSORS](this, "paid") // DATE
  val PRICE: SqlField[Double, SPONSORS] = new SqlField[Double, SPONSORS](this, "price") // DOUBLE PRECISION NOT NULL
  val CURRENCY: SqlField[Price.Currency, SPONSORS] = new SqlField[Price.Currency, SPONSORS](this, "currency") // VARCHAR(10) NOT NULL
  val CREATED_AT: SqlField[Instant, SPONSORS] = new SqlField[Instant, SPONSORS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, SPONSORS, USERS] = new SqlFieldRef[User.Id, SPONSORS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, SPONSORS] = new SqlField[Instant, SPONSORS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, SPONSORS, USERS] = new SqlFieldRef[User.Id, SPONSORS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, SPONSORS]] = List(ID, GROUP_ID, PARTNER_ID, SPONSOR_PACK_ID, CONTACT_ID, START, FINISH, PAID, PRICE, CURRENCY, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("start", "start date", NonEmptyList.of(START.desc)))

  override def searchOn: List[SqlField[_, SPONSORS]] = List(ID)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): SPONSORS = new SPONSORS(Some(alias))
}

private[database] object SPONSORS {
  val table = new SPONSORS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
