package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class PROPOSAL_RATINGS private(getAlias: Option[String] = Some("pr")) extends Table.SqlTable("PUBLIC", "proposal_ratings", getAlias) {
  type Self = PROPOSAL_RATINGS

  val PROPOSAL_ID: SqlFieldRef[Proposal.Id, PROPOSAL_RATINGS, PROPOSALS] = new SqlFieldRef[Proposal.Id, PROPOSAL_RATINGS, PROPOSALS](this, "proposal_id", PROPOSALS.table.ID) // CHAR(36) NOT NULL
  val GRADE: SqlField[Proposal.Rating.Grade, PROPOSAL_RATINGS] = new SqlField[Proposal.Rating.Grade, PROPOSAL_RATINGS](this, "grade") // INT NOT NULL
  val CREATED_AT: SqlField[Instant, PROPOSAL_RATINGS] = new SqlField[Instant, PROPOSAL_RATINGS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, PROPOSAL_RATINGS, USERS] = new SqlFieldRef[User.Id, PROPOSAL_RATINGS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, PROPOSAL_RATINGS]] = List(PROPOSAL_ID, GRADE, CREATED_AT, CREATED_BY)

  override def getSorts: List[Sort] = List(Sort("created", "created", NonEmptyList.of(CREATED_AT.asc)))

  override def searchOn: List[SqlField[_, PROPOSAL_RATINGS]] = List(PROPOSAL_ID, GRADE, CREATED_BY)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): PROPOSAL_RATINGS = new PROPOSAL_RATINGS(Some(alias))
}

private[database] object PROPOSAL_RATINGS {
  val table = new PROPOSAL_RATINGS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
