package gospeak.infra.services.storage.sql.database.tables

import java.time.{Instant, LocalDateTime}

import cats.data.NonEmptyList
import gospeak.core.domain._
import gospeak.core.domain.messages.Message
import gospeak.core.domain.utils.SocialAccounts.SocialAccount._
import gospeak.core.services.meetup.domain.{MeetupEvent, MeetupGroup, MeetupUser, MeetupVenue}
import gospeak.core.services.slack.domain.SlackToken
import gospeak.libs.scala.domain._
import gospeak.libs.sql.dsl.Table._
import gospeak.libs.sql.dsl._

import scala.concurrent.duration.FiniteDuration

/**
 * Generated file, do not update it!
 *
 * Regenerate it using Gospeak CLI (`gospeak.web.GsCLI` class) to keep it in sync with the database state.
 *
 * --
 *
 * Class generated by gospeak.libs.sql.generator.writer.ScalaWriter
 */
class EXTERNAL_CFPS private(getAlias: Option[String] = Some("ec")) extends Table.SqlTable("PUBLIC", "external_cfps", getAlias) {
  type Self = EXTERNAL_CFPS

  val ID: SqlField[ExternalCfp.Id, EXTERNAL_CFPS] = new SqlField[ExternalCfp.Id, EXTERNAL_CFPS](this, "id") // CHAR(36) NOT NULL
  val EVENT_ID: SqlFieldRef[ExternalEvent.Id, EXTERNAL_CFPS, EXTERNAL_EVENTS] = new SqlFieldRef[ExternalEvent.Id, EXTERNAL_CFPS, EXTERNAL_EVENTS](this, "event_id", EXTERNAL_EVENTS.table.ID) // CHAR(36) NOT NULL
  val DESCRIPTION: SqlField[Markdown, EXTERNAL_CFPS] = new SqlField[Markdown, EXTERNAL_CFPS](this, "description") // VARCHAR(4096) NOT NULL
  val BEGIN: SqlFieldOpt[LocalDateTime, EXTERNAL_CFPS] = new SqlFieldOpt[LocalDateTime, EXTERNAL_CFPS](this, "begin") // TIMESTAMP
  val CLOSE: SqlFieldOpt[LocalDateTime, EXTERNAL_CFPS] = new SqlFieldOpt[LocalDateTime, EXTERNAL_CFPS](this, "close") // TIMESTAMP
  val URL: SqlField[Url, EXTERNAL_CFPS] = new SqlField[Url, EXTERNAL_CFPS](this, "url") // VARCHAR(1024) NOT NULL
  val CREATED_AT: SqlField[Instant, EXTERNAL_CFPS] = new SqlField[Instant, EXTERNAL_CFPS](this, "created_at") // TIMESTAMP NOT NULL
  val CREATED_BY: SqlFieldRef[User.Id, EXTERNAL_CFPS, USERS] = new SqlFieldRef[User.Id, EXTERNAL_CFPS, USERS](this, "created_by", USERS.table.ID) // CHAR(36) NOT NULL
  val UPDATED_AT: SqlField[Instant, EXTERNAL_CFPS] = new SqlField[Instant, EXTERNAL_CFPS](this, "updated_at") // TIMESTAMP NOT NULL
  val UPDATED_BY: SqlFieldRef[User.Id, EXTERNAL_CFPS, USERS] = new SqlFieldRef[User.Id, EXTERNAL_CFPS, USERS](this, "updated_by", USERS.table.ID) // CHAR(36) NOT NULL

  override def getFields: List[SqlField[_, EXTERNAL_CFPS]] = List(ID, EVENT_ID, DESCRIPTION, BEGIN, CLOSE, URL, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)

  override def getSorts: List[Sort] = List(Sort("close", "close", NonEmptyList.of(CLOSE.asc)))

  override def searchOn: List[SqlField[_, EXTERNAL_CFPS]] = List(ID, DESCRIPTION, URL)

  override def getFilters: List[Filter] = List()

  def alias(alias: String): EXTERNAL_CFPS = new EXTERNAL_CFPS(Some(alias))
}

private[database] object EXTERNAL_CFPS {
  val table = new EXTERNAL_CFPS() // table instance, should be accessed through `gospeak.infra.services.storage.sql.database.Tables` object
}
